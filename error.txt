le/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Install python-cryptography] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Check automation eda redis TLS configuration] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Install python-cryptography] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Check automation eda postgresql TLS configuration] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Check automation eda external postgresql configuration] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Check automation eda external postgresql configuration] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Check automation gateway TLS configuration] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Install python-cryptography] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Check automation gateway redis TLS configuration] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Install python-cryptography] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Check automation gateway postgresql TLS configuration] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Check automation gateway external postgresql configuration] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Check automation gateway external postgresql configuration] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Check redis TLS configuration] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Install python-cryptography] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Check postgresql TLS configuration] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Install python-cryptography] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Check receptor TLS configuration] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Install python-cryptography] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure receptor TLS certificate uses SAN extension with OID] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Get receptor x509 TLS certificate information] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.preflight : Ensure receptor TLS certificate uses SAN extension with OID] ***\nskipping: [aap.demo.local]\n\nPLAY [Install common container components] *************************************\n\nTASK [ansible.containerized_installer.common : Get service facts] **************\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Configure sub UID/GIDs] *********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/subids.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.common : Ensure user has enough subuids in namespace] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Ensure user has enough subugids in namespace] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Run ostree tasks] ***************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/ostree.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.common : Test for ostree-based OS] *******\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Set ostree-based OS fact] *******\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Set common facts] ***************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/facts.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.common : Set the TLS CA directory fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Set io.containers.autoupdate=local label] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Set io.containers.autoupdate=registry label] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Get package Facts] **************\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Ensure container tools packages are present] ***\nskipping: [aap.demo.local] => (item=crun) \nskipping: [aap.demo.local] => (item=podman) \nskipping: [aap.demo.local] => (item=slirp4netns) \nskipping: [aap.demo.local] => (item=fuse-overlayfs) \nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Ensure python3-cryptography and python3-psycopg2 python packages are present] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Ensure python3-cryptography python package is present] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Ensure python3-firewall package is present] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Install container tools] ********\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Set maxkeys] ********************\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Set maxbytes] *******************\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Create the containers config directory] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Configure podman runtime with crun] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Configure podman execution plane] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/executionplane.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.common : Create the custom podman rootless storage folder] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Create custom podman storage.conf] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Create directory for custom podman service configuration] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Configure podman service] *******\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Enable podman socket] ***********\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Create podman custom command] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Install polkit] *****************\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Ensure polkit is started] *******\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Ensure user belongs to the systemd-journald group] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Disable lingering for ansible_user] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Enable lingering for ansible_user] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Set podman version facts] *******\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/podman_facts.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.common : Get podman version] *************\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Set podman idempotence fact] ****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Include registry tasks] *********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/registry.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.common : Login to the registry] **********\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Include container image tasks] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/images.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.common : Set full container images URL] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add gateway images to the list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add controller image to the list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add receptor image to the list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add eda images to the list] *****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add hub images to the list] *****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add redis image to the list] ****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add postgresql image to the list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add performance co-pilot image to the list] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add DE images to the list] ******\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add EE images to the list] ******\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Set de_extra_images fact] *******\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add extra DE images to the ee list] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Set ee_extra_images fact] *******\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add extra EE images to the ee list] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Install compress/rsync packages] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Create temporary directory for container tarballs] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Create temporary file for rsync filter] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Create the rsync filter] ********\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Copy bundled container images] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Remove temorary rsync filter file] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Uncompress bundled container images] ***\nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/gateway-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/gateway-proxy-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/controller-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/receptor-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/eda-controller-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/eda-controller-ui-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/hub-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/hub-web-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/rhel8/redis-6:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/rhel8/postgresql-15:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest) \nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Load the controlplane container images] ***\nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/gateway-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/gateway-proxy-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/controller-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/receptor-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/eda-controller-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/eda-controller-ui-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/hub-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/hub-web-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/rhel8/redis-6:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/rhel8/postgresql-15:latest) \nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Load the executionplane container images] ***\nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest) \nskipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest) \nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Remove temporary directory] *****\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Pull the controlplane container images] ***\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/gateway-rhel8:latest)\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/gateway-proxy-rhel8:latest)\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/controller-rhel8:latest)\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/receptor-rhel8:latest)\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/eda-controller-rhel8:latest)\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/eda-controller-ui-rhel8:latest)\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/hub-rhel8:latest)\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/hub-web-rhel8:latest)\nchanged: [aap.demo.local] => (item=registry.redhat.io/rhel8/redis-6:latest)\nchanged: [aap.demo.local] => (item=registry.redhat.io/rhel8/postgresql-15:latest)\n\nTASK [ansible.containerized_installer.common : Pull the executionplane container images] ***\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest)\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest)\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest)\n\nTASK [ansible.containerized_installer.common : Configure firewalld] ************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/firewalld.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.common : Ensure firewalld is started] ****\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Install python-firewall] ********\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Configure TLS CA] ***************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.common : Create the TLS CA directory] ****\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Install python-cryptography] ****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Generate a private key] *********\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Check the current CA certificate] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Generate a certificate signing request] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Generate a self signed x509 certificate] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Create local temporary directory] ***\nchanged: [aap.demo.local -> localhost]\n\nTASK [ansible.containerized_installer.common : Fetch files locally] ************\nchanged: [aap.demo.local] => (item=cert)\nchanged: [aap.demo.local] => (item=key)\n\nTASK [ansible.containerized_installer.common : Copy TLS CA certificate] ********\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Copy TLS CA key] ****************\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Remove local temporary directory] ***\nchanged: [aap.demo.local -> localhost]\n\nTASK [ansible.containerized_installer.common : Copy TLS CA certificate] ********\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Copy TLS CA key] ****************\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Set volumes for updating the CA trust] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Copy extra TLS CA certificates] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add extra TLS CA certificat to volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Create the PKI directories] *****\nchanged: [aap.demo.local] => (item=edk2)\nchanged: [aap.demo.local] => (item=java)\nchanged: [aap.demo.local] => (item=pem)\nchanged: [aap.demo.local] => (item=openssl)\n\nRUNNING HANDLER [ansible.containerized_installer.common : Update CA trust] *****\nchanged: [aap.demo.local]\n\nPLAY [Install the database] ****************************************************\n\nTASK [ansible.containerized_installer.postgresql : Set postgresql facts] *******\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/facts.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.postgresql : Set postgresql hostname] ****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Set postgresql IPs] *********\nok: [aap.demo.local] => (item=172.31.3.97)\nok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)\n\nTASK [ansible.containerized_installer.postgresql : Set postgresql volumes] *****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Add tls to volumes] *********\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Set effective cache size fact for dedicated database node] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Set effective cache size fact for collocated database node] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Set shared buffers fact for dedicated database node] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Set shared buffers fact for collocated database node] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Configure podman secrets] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/secrets.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.postgresql : Create the postgresql admin password secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Create podman volumes] ******\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/volumes.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.postgresql : Manage the postgresql data volume] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Configure TLS] **************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.postgresql : Create the postgresql config directory] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Install python-cryptography] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Check the current postgresql private key] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Generate a private key] *****\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Check the current postgresql certificate] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Generate a certificate signing request] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Generate a self signed x509 certificate] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Copy postgresql TLS certificate] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Copy postgresql TLS key] ****\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Configure postgresql] *******\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/config.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.postgresql : Create the postgresql configuration] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Handle container image update] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/update.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.postgresql : Get postgresql container information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Get postgresql image information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Set postgresql update fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Stop postgresql service on update] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Configure containers] *******\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/containers.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.postgresql : Create the postgresql container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Ensure postgresql container is enabled and started] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/systemd.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.postgresql : Manage postgresql container via systemd] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.postgresql : Add firewalld rules] ********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/firewalld.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.postgresql : Manage postgresql firewalld port] ***\nskipping: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.postgresql : Restart postgresql] ***\nchanged: [aap.demo.local]\n\nPLAY [Install redis cluster cache] *********************************************\nskipping: no hosts matched\n\nPLAY [Install the redis cache] *************************************************\n\nTASK [Install and configure redis unix socket] *********************************\n\nTASK [ansible.containerized_installer.redis : Set redis facts] *****************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/facts.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Set redis hostname] **************\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Set redis IPs] *******************\nok: [aap.demo.local] => (item=172.31.3.97)\nok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)\n\nTASK [ansible.containerized_installer.redis : Set redis cluster IPs] ***********\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Set redis volumes] ***************\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Add redis nodes file when cluster] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Add runtime directory volume] ****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Add redis ACL file to volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Add tls to volumes] **************\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Set redis user password facts] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Create podman volumes] ***********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/volumes.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Manage the redis data volume] ****\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Manage the redis run volume] *****\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Configure redis] *****************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/config.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Create the redis config directory] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Create the redis configuration file] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Create the redis user ACL file] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Create redis nodes file] *********\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Configure TLS] *******************\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Handle container image update] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/update.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Get redis container information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Get redis image information] *****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Set redis update fact] ***********\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Stop redis service on update] ****\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Configure containers] ************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/containers.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Create the redis container] ******\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Ensure redis container is enabled and started] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/systemd.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Manage redis container via systemd] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Add firewalld rules] *************\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Initialize the redis cluster] ****\nskipping: [aap.demo.local]\n\nTASK [Install and configure redis tcp socket] **********************************\n\nTASK [ansible.containerized_installer.redis : Set redis facts] *****************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/facts.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Set redis hostname] **************\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Set redis IPs] *******************\nok: [aap.demo.local] => (item=172.31.3.97)\nok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)\n\nTASK [ansible.containerized_installer.redis : Set redis cluster IPs] ***********\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Set redis volumes] ***************\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Add redis nodes file when cluster] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Add runtime directory volume] ****\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Add redis ACL file to volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Add tls to volumes] **************\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Set redis user password facts] ***\nok: [aap.demo.local -> localhost]\n\nTASK [ansible.containerized_installer.redis : Create podman volumes] ***********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/volumes.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Manage the redis data volume] ****\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Manage the redis run volume] *****\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Configure redis] *****************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/config.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Create the redis config directory] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Create the redis configuration file] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Create the redis user ACL file] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Create redis nodes file] *********\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Configure TLS] *******************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Install python-cryptography] *****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Check the current redis private key] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Generate a private key] **********\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Check the current redis certificate] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Generate a certificate signing request] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Generate a self signed x509 certificate] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Copy redis TLS certificate] ******\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Copy redis TLS key] **************\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Handle container image update] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/update.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Get redis container information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Get redis image information] *****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Set redis update fact] ***********\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Stop redis service on update] ****\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Configure containers] ************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/containers.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Create the redis container] ******\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Ensure redis container is enabled and started] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/systemd.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Manage redis container via systemd] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Add firewalld rules] *************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/firewalld.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.redis : Manage redis firewalld port] *****\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Manage redis firewalld cluster port] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.redis : Initialize the redis cluster] ****\nskipping: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.redis : Restart redis] ********\nchanged: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.redis : Restart redis] ********\nchanged: [aap.demo.local]\n\nPLAY [Get Automation Controller configuration for gateway] *********************\n\nTASK [ansible.containerized_installer.automationcontroller : Set controller hostname, port(s) and protocol] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Add https port to controller port list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set controller URL] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set controller IPs] ***\nok: [aap.demo.local] => (item=172.31.3.97)\nok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)\n\nTASK [ansible.containerized_installer.automationcontroller : Add postgresql container to requires when on the same node] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set automation controller volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Add postgresql tls to automation controller volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Add postgresql socket directory to common automation controller volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set rsyslog/task/web automation controller volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Add tls to web automation controller volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set systemd requires] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set environment variables for recent AAP releases] ***\nok: [aap.demo.local]\n\nPLAY [Get Automation EDA configuration for gateway] ****************************\n\nTASK [ansible.containerized_installer.automationeda : Set eda hostname, port(s) and protocol] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set eda redis hostname] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add https port to eda port list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set eda URL] *************\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set eda IPs] *************\nok: [aap.demo.local] => (item=172.31.3.97)\nok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)\n\nTASK [ansible.containerized_installer.automationeda : Set decision environment facts] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Remove redis container dependency when using multiple nodes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add postgresql container to requires when on the same node] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set automation eda env and volume facts] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add postgresql password secret to secrets] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add postgresql tls to common automation eda volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add postgresql socket directory to common automation eda volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add redis password to secrets] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set scheduler/web/worker automation eda env/volumes/secrets] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add tls to web automation eda volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Use local redis instance with single node] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add redis tls to api/scheduler/workers automation eda volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set redis cluster hostnames] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set eda rulebook queue name] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set systemd requires] ****\nok: [aap.demo.local]\n\nPLAY [Get Automation Hub configuration for gateway] ****************************\n\nTASK [ansible.containerized_installer.automationhub : Set hub hostname, port(s) and protocol] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add https port to hub port list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set hub IPs] *************\nok: [aap.demo.local] => (item=172.31.3.97)\nok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)\n\nTASK [ansible.containerized_installer.automationhub : Add postgresql container to requires when on the same node] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set automation hub volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add hub tmp volume when using NFS] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add postgresql socket directory to common automation hub volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add postgresql tls to automation hub volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set api/content/worker automation hub volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add galaxy importer to worker volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add tls to web automation hub volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add collection volume to automation worker volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add collection secret to automation worker secrets] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add container volume to automation worker volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add container secret to automation worker secrets] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set systemd requires] ****\nok: [aap.demo.local]\n\nPLAY [Install the Automation Gateway] ******************************************\n\nTASK [ansible.containerized_installer.automationgateway : Set automation gateway facts] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/facts.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway hostname, port(s) and protocol] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add https port to gateway port list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add https port to gateway proxy port list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Combine gateway ports] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway URL] *****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway IPs] *****\nok: [aap.demo.local] => (item=172.31.3.97)\nok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)\n\nTASK [ansible.containerized_installer.automationgateway : Add postgresql container to requires when on the same node] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway redis hostname] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway redis proto/host facts] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway redis url facts] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Append redis database when standalone] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set redis cluster hostnames] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set automation gateway volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add postgresql password secret to secrets] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add postgresql socket directory to common automation gateway volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set web automation gateway and proxy volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add postgresql tls to automation gateway volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add tls to automation gateway volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add tls to automation gateway proxy volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add redis tls to automation gateway volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Render proxy variables] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set systemd requires] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Create podman volumes] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/volumes.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Manage the Automation Gateway nginx volume] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Configure postgresql] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/postgresql.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Install python-psycopg2] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Wait for postgresql to be ready] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Create the automation gateway postgresql user] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Grant the automation gateway role to postgresql admin user] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Create the automation gateway postgresql database] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Configure automation gateway] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/config.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Create the gateway directories] ***\nchanged: [aap.demo.local] => (item=/home/aap/aap/gatewayproxy/etc)\nchanged: [aap.demo.local] => (item=/home/aap/aap/gateway/nginx/etc)\nchanged: [aap.demo.local] => (item=/home/aap/aap/gateway/etc)\n\nTASK [ansible.containerized_installer.automationgateway : Create the envoy configuration] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Check current somaxconn value] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Check current net.ipv4.tcp_max_syn_backlog value] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set somaxconn to value greater than or equal to gateway_uwsgi_listen_queue_size in supervisor config] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set tcp_max_syn_backlog to value greater than or equal to gateway_uwsgi_listen_queue_size in supervisor config] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Create the uwsgi configuration] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Create the gateway django settings override file] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Configure TLS or nginx] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Install python-cryptography] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Check the current gateway private key] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Generate a private key] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Check the current gateway certificate] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Generate a certificate signing request] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Generate a self signed x509 certificate] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Copy gateway TLS certificate] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Copy gateway TLS key] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Configure TLS for redis] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/tls_redis.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Install python-cryptography] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Check the current gateway redis private key] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Generate a private key for redis] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Check the current gateway redis certificate] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Generate a certificate signing request for redis] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Generate a self signed x509 certificate for redis] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Copy redis TLS certificate] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Copy redis TLS key] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Configure TLS for postgresql] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Configure nginx] *****\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/nginx.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Get sysctl net.ipv4.ip_unprivileged_port_start setting] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Allow rootless automation gateway containers to bind from port 80 onwards] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Create the nginx configuration] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Configure supervisor] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/supervisor.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Create the supervisor directory] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Create the supervisor configuration] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Configure podman secrets] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/secrets.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Get all podman secrets] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Create the gateway admin password secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Create the gateway db_password secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Create the gateway redis url secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Get the existing gateway secret key secret] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set the gateway secret key secret fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Create the gateway secret_key secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Get all podman secrets after update] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway recreate container fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Handle container image update] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/update.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Get gateway container information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Get gateway image information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway update fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Stop gateway service on update] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Configure containers] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/containers.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Create the automation gateway proxy container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Create the automation gateway container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Initialize data] *****\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/init.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Initialize the automation gateway database] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Create django super user] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Update django super user password] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Initialize authenticators] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Ensure automation gateway containers are enabled and started] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/systemd.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Set facts for systemd services] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Manage automation gateway containers via systemd] ***\nchanged: [aap.demo.local] => (item=automation-gateway.service)\nchanged: [aap.demo.local] => (item=automation-gateway-proxy.service)\n\nTASK [ansible.containerized_installer.automationgateway : Add firewalld rules] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/firewalld.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Manage automation gateway firewalld ports] ***\nskipping: [aap.demo.local] => (item=8083) \nskipping: [aap.demo.local] => (item=8446) \nskipping: [aap.demo.local] => (item=80) \nskipping: [aap.demo.local] => (item=443) \nskipping: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.automationgateway : Restart automation gateway proxy] ***\nchanged: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.automationgateway : Restart automation gateway] ***\nchanged: [aap.demo.local]\n\nPLAY [Run the Automation Gateway postinstall] **********************************\n\nTASK [ansible.containerized_installer.automationgateway : Ensure automation gateway is ready] ***\nFAILED - RETRYING: [aap.demo.local]: Ensure automation gateway is ready (30 retries left).\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Update automation platform gateway settings] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Update automation platform gateway http ports] ***\nchanged: [aap.demo.local] => (item={'name': 'port-443', 'number': 443, 'use_https': True, 'is_api_port': True})\n\nTASK [ansible.containerized_installer.automationgateway : Update automation platform gateway service clusters] ***\nchanged: [aap.demo.local] => (item={'name': 'gateway', 'service_type': 'gateway'})\nchanged: [aap.demo.local] => (item={'name': 'controller', 'service_type': 'controller'})\nchanged: [aap.demo.local] => (item={'name': 'hub', 'service_type': 'hub'})\nchanged: [aap.demo.local] => (item={'name': 'eda', 'service_type': 'eda'})\n\nTASK [ansible.containerized_installer.automationgateway : Update automation platform gateway service nodes] ***\nchanged: [aap.demo.local] => (item={'name': 'Node gateway - aap.demo.local', 'service_cluster': 'gateway', 'address': 'aap.demo.local'})\nchanged: [aap.demo.local] => (item={'name': 'Node controller - aap.demo.local', 'service_cluster': 'controller', 'address': 'aap.demo.local'})\nchanged: [aap.demo.local] => (item={'name': 'Node hub - aap.demo.local', 'service_cluster': 'hub', 'address': 'aap.demo.local'})\nchanged: [aap.demo.local] => (item={'name': 'Node eda - aap.demo.local', 'service_cluster': 'eda', 'address': 'aap.demo.local', 'tags': 'eda-hybrid'})\n\nTASK [ansible.containerized_installer.automationgateway : Update automation platform gateway services] ***\nchanged: [aap.demo.local] => (item={'name': 'gateway api', 'api_slug': 'gateway', 'http_port': 'port-443', 'service_cluster': 'gateway', 'is_service_https': True, 'service_path': '/', 'service_port': 8446, 'order': 100, 'enable_gateway_auth': False})\nchanged: [aap.demo.local] => (item={'name': 'controller api', 'api_slug': 'controller', 'http_port': 'port-443', 'service_cluster': 'controller', 'is_service_https': True, 'service_path': '/api/controller/', 'service_port': 8443, 'order': 1})\nchanged: [aap.demo.local] => (item={'name': 'galaxy api', 'api_slug': 'galaxy', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_path': '/api/galaxy/', 'service_port': 8444, 'order': 2})\nchanged: [aap.demo.local] => (item={'name': 'eda api', 'api_slug': 'eda', 'http_port': 'port-443', 'service_cluster': 'eda', 'is_service_https': True, 'service_path': '/api/eda/', 'service_port': 8445, 'order': 3})\n\nTASK [ansible.containerized_installer.automationgateway : Update automation platform gateway routes] ***\nchanged: [aap.demo.local] => (item={'name': 'hub container registry', 'description': 'Hub Container Registry.', 'gateway_path': '/v2/', 'service_path': '/v2/', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_port': 8444, 'enable_gateway_auth': True})\nchanged: [aap.demo.local] => (item={'name': 'hub ui', 'description': 'Hub UI', 'gateway_path': '/ui/', 'service_path': '/ui/', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_port': 8444, 'enable_gateway_auth': True})\nchanged: [aap.demo.local] => (item={'name': 'hub ui static files', 'description': 'Hub UI Static Files', 'gateway_path': '/static/galaxy_ng/', 'service_path': '/static/galaxy_ng/', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_port': 8444, 'enable_gateway_auth': True})\nchanged: [aap.demo.local] => (item={'name': 'pulp content', 'description': 'Pulp Content', 'gateway_path': '/pulp', 'service_path': '/pulp', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_port': 8444, 'enable_gateway_auth': True})\nchanged: [aap.demo.local] => (item={'name': 'pulp container tokens', 'description': 'Pulp Container Tokens', 'gateway_path': '/token', 'service_path': '/token', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_port': 8444, 'enable_gateway_auth': True})\nchanged: [aap.demo.local] => (item={'name': 'pulp container extensions', 'description': 'Pulp Container Extensions', 'gateway_path': '/extensions', 'service_path': '/extensions', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_port': 8444, 'enable_gateway_auth': True})\nchanged: [aap.demo.local] => (item={'name': 'Event Driven Automation Event Stream', 'description': 'Proxy to the EDA Event Streams', 'gateway_path': '/eda-event-streams/', 'service_path': '/', 'http_port': 'port-443', 'service_cluster': 'eda', 'is_service_https': True, 'service_port': 8445, 'enable_gateway_auth': False, 'node_tags': 'eda-hybrid,eda-event-stream'})\n\nTASK [ansible.containerized_installer.automationgateway : Get all controller podman secrets] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Generate controller service key] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/service_key.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Generate service key] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set controller service key fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Get all eda podman secrets] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Generate eda service key] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/service_key.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Generate service key] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set eda service key fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Get all hub podman secrets] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Generate hub service key] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/service_key.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Generate service key] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set hub service key fact] ***\nok: [aap.demo.local]\n\nPLAY [Install and configure receptor] ******************************************\n\nTASK [ansible.containerized_installer.receptor : Set receptor facts] ***********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/facts.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.receptor : Set receptor node type for controller] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Set receptor hostname, port and protocol facts] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Set controller mesh peers] ****\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Set receptor peers for controller] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Set receptor peers fact] ******\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Set receptor IPs] *************\nok: [aap.demo.local] => (item=172.31.3.97)\nok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)\n\nTASK [ansible.containerized_installer.receptor : Set receptor volume facts] ****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Add tls to volumes] ***********\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Add signing private key to volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Add signing public key to volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Set _receptor_volumes and _registry_auth_file facts] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Configure receptor] ***********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/config.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.receptor : Create the receptor directory] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Create the controller directories] ***\nchanged: [aap.demo.local] => (item=/home/aap/aap/controller/data/job_execution)\nchanged: [aap.demo.local] => (item=/home/aap/aap/controller/data/projects)\n\nTASK [ansible.containerized_installer.receptor : Create the receptor configuration] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Create podman volumes] ********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/volumes.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.receptor : Manage the receptor volumes] ***\nchanged: [aap.demo.local] => (item=receptor_run)\nchanged: [aap.demo.local] => (item=receptor_runner)\nchanged: [aap.demo.local] => (item=receptor_home)\nchanged: [aap.demo.local] => (item=receptor_data)\n\nTASK [ansible.containerized_installer.receptor : Configure TLS] ****************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.receptor : Install python-cryptography] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Check the current receptor private key] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Generate a private key] *******\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Check the current receptor certificate] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Generate a certificate signing request] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Generate a self signed x509 certificate] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Copy receptor TLS certificate] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Copy receptor TLS key] ********\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Configure signing] ************\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/signing.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.receptor : Install python-cryptography] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Generate a RSA private key] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Generate a RSA public key] ****\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Create local temporary directory] ***\nchanged: [aap.demo.local -> localhost]\n\nTASK [ansible.containerized_installer.receptor : Fetch files locally] **********\nchanged: [aap.demo.local] => (item=private)\nchanged: [aap.demo.local] => (item=public)\n\nTASK [ansible.containerized_installer.receptor : Copy RSA public key] **********\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Copy RSA private key] *********\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Remove local temporary directory] ***\nchanged: [aap.demo.local -> localhost]\n\nTASK [ansible.containerized_installer.receptor : Copy receptor signing RSA public key] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Copy receptor signing RSA private key] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Handle container image update] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/update.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.receptor : Get receptor container information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Get receptor image information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Set receptor update fact] *****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Stop receptor service on update] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Configure containers] *********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/containers.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.receptor : Create the receptor container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Ensure receptor container is enabled and started] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/systemd.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.receptor : Manage receptor container via systemd] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.receptor : Add firewalld rules] **********\nskipping: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.receptor : Restart receptor] ***\nchanged: [aap.demo.local]\n\nPLAY [Install the Automation Controller] ***************************************\n\nTASK [ansible.containerized_installer.automationcontroller : Get automation controller version] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/version.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Get automation controller version] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set automation controller version fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set automation controller facts] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/facts.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Set controller hostname, port(s) and protocol] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Add https port to controller port list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set controller URL] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set controller IPs] ***\nok: [aap.demo.local] => (item=172.31.3.97)\nok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)\n\nTASK [ansible.containerized_installer.automationcontroller : Add postgresql container to requires when on the same node] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set automation controller volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Add postgresql tls to automation controller volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Add postgresql socket directory to common automation controller volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set rsyslog/task/web automation controller volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Add tls to web automation controller volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set systemd requires] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set environment variables for recent AAP releases] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create podman volumes] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/volumes.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Manage the Automation Controller nginx volume] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the controller directories] ***\nchanged: [aap.demo.local] => (item=/home/aap/aap/controller/etc/conf.d)\nok: [aap.demo.local] => (item=/home/aap/aap/controller/data/job_execution)\nchanged: [aap.demo.local] => (item=/home/aap/aap/controller/data/logs)\nok: [aap.demo.local] => (item=/home/aap/aap/controller/data/projects)\nchanged: [aap.demo.local] => (item=/home/aap/aap/controller/data/rsyslog)\n\nTASK [ansible.containerized_installer.automationcontroller : Configure postgresql] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/postgresql.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Install python-psycopg2] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Wait for postgresql to be ready] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the automation controller postgresql user] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Grant the automation controller role to postgresql admin user] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the automation controller postgresql database] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Configure TLS] ****\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Install python-cryptography] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Check the current controller private key] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Generate a private key] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Check the current controller certificate] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Generate a certificate signing request] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Generate a self signed x509 certificate] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Copy controller TLS certificate] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Copy controller TLS key] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Configure TLS for postgresql] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Configure nginx] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/nginx.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Get sysctl net.ipv4.ip_unprivileged_port_start setting] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Allow rootless container to bind from port 80 onwards] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the nginx directory] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the nginx configuration] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the redirect page] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Configure rsyslog] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/rsyslog.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Create the rsyslog directory] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Configure supervisor] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/supervisor.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Create the supervisor directory] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Configure podman secrets] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/secrets.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Get all podman secrets] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Get the existing controller websocket secret] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set the controller channels secret fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Get the existing controller secret key secret] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set the controller secret key secret fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Get the existing controller resource server secret] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set the controller resource server secret fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the controller channels secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the controller postgres secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the controller SECRET_KEY secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the controller resource server secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Get all podman secrets after update] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set controller recreate container fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the controller configuration] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the controller extra configurations] ***\nchanged: [aap.demo.local] => (item=callback_receiver_workers)\nchanged: [aap.demo.local] => (item=cluster_host_id)\nchanged: [aap.demo.local] => (item=container_groups)\nchanged: [aap.demo.local] => (item=execution_environments)\nchanged: [aap.demo.local] => (item=insights)\nchanged: [aap.demo.local] => (item=redis)\nchanged: [aap.demo.local] => (item=subscription_usage_model)\n\nTASK [ansible.containerized_installer.automationcontroller : Check current somaxconn value] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Check current net.ipv4.tcp_max_syn_backlog value] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set somaxconn to value greater than or equal to controller_uwsgi_listen_queue_size in supervisor config] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set tcp_max_syn_backlog to value greater than or equal to controller_uwsgi_listen_queue_size in supervisor config] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the controller uwsgi configuration] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create task custom command] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Handle container image update] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/update.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Get controller container information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Get controller image information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set controller update fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Stop controller service on update] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Configure containers] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/containers.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Create the automation controller rsyslog container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the automation controller task container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the automation controller web container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Initialize data] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/init.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Initialize the automation controller database] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the default execution environments] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Register the controller instance in the database] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Register the execution/hop instances in the database] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Set the receptor listener port] ***\nchanged: [aap.demo.local] => (item=aap.demo.local)\n\nTASK [ansible.containerized_installer.automationcontroller : Register controller peers in the database] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Register other peers in the database] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Register controller nodes to default queue] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Register execution nodes to default queue] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Register controller nodes to controlplane queue] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Register execution nodes to executionplane queue] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create django super user] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Update django super user password] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create the default organization] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Ensure automation controller containers are enabled and started] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/systemd.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Set facts for systemd services] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Ensure automation controller containers are enabled and started] ***\nchanged: [aap.demo.local] => (item=automation-controller-task.service)\nchanged: [aap.demo.local] => (item=automation-controller-web.service)\nchanged: [aap.demo.local] => (item=automation-controller-rsyslog.service)\n\nTASK [ansible.containerized_installer.automationcontroller : Add firewalld rules] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/firewalld.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Manage automation controller firewalld ports] ***\nskipping: [aap.demo.local] => (item=8080) \nskipping: [aap.demo.local] => (item=8443) \nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Configure the license] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/license.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationcontroller : Wait for the Web port to be reachable] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Wait for the Controller API to te ready] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Create a tmp file for the license] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Copy the license file] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Add Automation Controller subscription] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationcontroller : Delete the tmp file] ***\nchanged: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.automationcontroller : Restart controller rsyslog] ***\nchanged: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.automationcontroller : Restart controller task] ***\nchanged: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.automationcontroller : Restart controller web] ***\nchanged: [aap.demo.local]\n\nPLAY [Install the Automation EDA] **********************************************\n\nTASK [ansible.containerized_installer.automationeda : Get eda version] *********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/version.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Get eda version from container image] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set eda version fact] ****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set automation eda facts] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/facts.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Set eda hostname, port(s) and protocol] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set eda redis hostname] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add https port to eda port list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set eda URL] *************\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set eda IPs] *************\nok: [aap.demo.local] => (item=172.31.3.97)\nok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)\n\nTASK [ansible.containerized_installer.automationeda : Set decision environment facts] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Remove redis container dependency when using multiple nodes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add postgresql container to requires when on the same node] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set automation eda env and volume facts] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add postgresql password secret to secrets] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add postgresql tls to common automation eda volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add postgresql socket directory to common automation eda volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add redis password to secrets] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set scheduler/web/worker automation eda env/volumes/secrets] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add tls to web automation eda volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Use local redis instance with single node] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add redis tls to api/scheduler/workers automation eda volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set redis cluster hostnames] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set eda rulebook queue name] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set systemd requires] ****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Configure postgresql] ****\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/postgresql.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Install python-psycopg2] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Wait for postgresql to be ready] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the automation eda postgresql user] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Grant the automation eda role to postgresql admin user] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the automation eda postgresql database] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Configure automation EDA] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/config.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Create the eda directory] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the eda configuration file] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Configure TLS for nginx] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Install python-cryptography] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Check the current eda private key] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Generate a private key for nginx] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Check the current eda certificate] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Generate a certificate signing request for nginx] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Generate a self signed x509 certificate for nginx] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Copy eda TLS certificate] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Copy eda TLS key] ********\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Configure TLS for redis] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Configure TLS for postgresql] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Configure nginx] *********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/nginx.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Get sysctl net.ipv4.ip_unprivileged_port_start setting] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Allow rootless container to bind from port 80 onwards] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the nginx directory] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the nginx configuration] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the redirect page] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Configure podman secrets] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/secrets.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Get all podman secrets] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Get the existing eda resource server secret] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set the eda resource server secret fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Get the existing eda SECRET_KEY secret] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set the eda SECRET_KEY secret fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the eda admin password secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the eda SECRET_KEY secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the eda resource server secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the eda db password secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the eda redis password secret] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Get all podman secrets after update] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set eda recreate container fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create podman volumes] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/volumes.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Manage the automation eda data volume] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Manage the automation eda nginx volume] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Handle container image update] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/update.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Set facts for containers] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add eda workers to containers list] ***\nok: [aap.demo.local] => (item=1)\nok: [aap.demo.local] => (item=2)\n\nTASK [ansible.containerized_installer.automationeda : Add eda activation workers containers list] ***\nok: [aap.demo.local] => (item=1)\nok: [aap.demo.local] => (item=2)\n\nTASK [ansible.containerized_installer.automationeda : Get eda container information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Get eda image information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Set eda update fact] *****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Stop eda service on update] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Configure containers] ****\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/containers.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Create the automation eda api container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the automation eda daphne container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the automation eda web container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the automation eda worker container] ***\nchanged: [aap.demo.local] => (item=1)\nchanged: [aap.demo.local] => (item=2)\n\nTASK [ansible.containerized_installer.automationeda : Create the automation eda activation worker container] ***\nchanged: [aap.demo.local] => (item=1)\nchanged: [aap.demo.local] => (item=2)\n\nTASK [ansible.containerized_installer.automationeda : Create the automation eda scheduler container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Initialize data] *********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/init.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Initialize the automation eda database] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create the initial automation eda data] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create django super user] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Update django super user password] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Ensure automation eda containers are enabled and started] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/systemd.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Set facts for systemd services] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add eda daphne to systemd services list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add eda workers to systemd services list] ***\nok: [aap.demo.local] => (item=1)\nok: [aap.demo.local] => (item=2)\n\nTASK [ansible.containerized_installer.automationeda : Add eda activation workers to systemd services list] ***\nok: [aap.demo.local] => (item=1)\nok: [aap.demo.local] => (item=2)\n\nTASK [ansible.containerized_installer.automationeda : Add eda scheduler to systemd services list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Manage automation eda containers via systemd] ***\nchanged: [aap.demo.local] => (item=automation-eda-api.service)\nchanged: [aap.demo.local] => (item=automation-eda-web.service)\nchanged: [aap.demo.local] => (item=automation-eda-daphne.service)\nchanged: [aap.demo.local] => (item=automation-eda-worker-1.service)\nchanged: [aap.demo.local] => (item=automation-eda-worker-2.service)\nchanged: [aap.demo.local] => (item=automation-eda-activation-worker-1.service)\nchanged: [aap.demo.local] => (item=automation-eda-activation-worker-2.service)\nchanged: [aap.demo.local] => (item=automation-eda-scheduler.service)\n\nTASK [ansible.containerized_installer.automationeda : Add firewalld rules] *****\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/firewalld.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Manage automation eda firewalld ports] ***\nskipping: [aap.demo.local] => (item=8082) \nskipping: [aap.demo.local] => (item=8445) \nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Add decision environments] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/decision_environment.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationeda : Ensure automation eda is ready] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create automation eda registry credentials] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create automation eda decision environments] ***\nchanged: [aap.demo.local] => (item={'name': 'Default Decision Environment', 'image': 'registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest'})\n\nTASK [ansible.containerized_installer.automationeda : Create automation eda registry credentials for hub] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationeda : Create automation eda decision environments for hub] ***\nchanged: [aap.demo.local] => (item={'name': 'Default Decision Environment', 'image': 'registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest'})\n\nRUNNING HANDLER [ansible.containerized_installer.automationeda : Restart eda api] ***\nchanged: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.automationeda : Restart eda daphne] ***\nchanged: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.automationeda : Restart eda web] ***\nchanged: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.automationeda : Restart eda workers] ***\nchanged: [aap.demo.local] => (item=1)\nchanged: [aap.demo.local] => (item=2)\n\nRUNNING HANDLER [ansible.containerized_installer.automationeda : Restart eda activation workers] ***\nchanged: [aap.demo.local] => (item=1)\nchanged: [aap.demo.local] => (item=2)\n\nRUNNING HANDLER [ansible.containerized_installer.automationeda : Restart eda scheduler] ***\nchanged: [aap.demo.local]\n\nPLAY [Install the Automation Hub] **********************************************\n\nTASK [ansible.containerized_installer.automationhub : Get pulpcore version] ****\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/version.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationhub : Get pulpcore version from container image] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set pulpcore version fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set automation hub facts] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/facts.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationhub : Set hub hostname, port(s) and protocol] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add https port to hub port list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set hub IPs] *************\nok: [aap.demo.local] => (item=172.31.3.97)\nok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)\n\nTASK [ansible.containerized_installer.automationhub : Add postgresql container to requires when on the same node] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set automation hub volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add hub tmp volume when using NFS] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add postgresql socket directory to common automation hub volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add postgresql tls to automation hub volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set api/content/worker automation hub volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add galaxy importer to worker volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add tls to web automation hub volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add collection volume to automation worker volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add collection secret to automation worker secrets] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add container volume to automation worker volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add container secret to automation worker secrets] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set systemd requires] ****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create podman volumes] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/volumes.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationhub : Manage the Automation Hub data volume] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Manage the Automation Hub tmp volume] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Manage the Automation Hub nginx volume] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the hub directory] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Handle NFS Data directory] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Configure postgresql] ****\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/postgresql.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationhub : Install python-psycopg2] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Wait for postgresql to be ready] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the automation hub postgresql user] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Grant the automation hub role to postgresql admin user] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the automation hub postgresql database] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Enable the hstore extension on automation hub database] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Install python-cryptography] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Configure TLS] ***********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/tls.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationhub : Check the current hub private key] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Generate a private key] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Check the current hub certificate] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Generate a certificate signing request] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Generate a self signed x509 certificate] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Copy hub TLS certificate] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Copy hub TLS key] ********\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Configure TLS for postgresql] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Configure nginx] *********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/nginx.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationhub : Get sysctl net.ipv4.ip_unprivileged_port_start setting] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Allow rootless container to bind from port 80 onwards] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the nginx directory] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the nginx configuration] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the redirect page] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Configure podman secrets] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/secrets.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationhub : Get all podman secrets] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Get the existing hub resource server secret] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set the hub resource server secret fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Get the existing hub database fields secret] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set the hub database fields secret fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the hub settings secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the hub database fields secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the collection signing key passphrase secret] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the container signing key passphrase secret] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the hub resource server secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Get the existing hub secret key secret] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set the hub secret key secret fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the hub secret key secret] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Get all podman secrets after update] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set hub recreate container fact] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Configure collection signing] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Configure container signing] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Generate the container authentication private key] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Generate the container authentication public key] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Copy the container authentication private key to all nodes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Copy the the container authentication public key to all nodes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Generate galaxy importer configuration] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Handle container image update] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/update.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationhub : Set facts for containers] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add hub workers to containers list] ***\nok: [aap.demo.local] => (item=1)\nok: [aap.demo.local] => (item=2)\n\nTASK [ansible.containerized_installer.automationhub : Get hub container information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Get hub image information] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Set hub update fact] *****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Stop hub service on update] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Configure containers] ****\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/containers.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationhub : Create the automation hub api container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the automation hub content container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the automation hub web container] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Create the automation hub worker container] ***\nchanged: [aap.demo.local] => (item=1)\nchanged: [aap.demo.local] => (item=2)\n\nTASK [ansible.containerized_installer.automationhub : Initialize data] *********\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/init.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationhub : Initialize the automation hub database] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Update admin user password] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Schedule resource sync task] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add the collection signing service] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add the container signing service] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Ensure automation hub containers are enabled and started] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/systemd.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationhub : Set facts for systemd services] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Add hub workers to systemd services list] ***\nok: [aap.demo.local] => (item=1)\nok: [aap.demo.local] => (item=2)\n\nTASK [ansible.containerized_installer.automationhub : Manage automation hub container via systemd] ***\nchanged: [aap.demo.local] => (item=automation-hub-api.service)\nchanged: [aap.demo.local] => (item=automation-hub-content.service)\nchanged: [aap.demo.local] => (item=automation-hub-web.service)\nchanged: [aap.demo.local] => (item=automation-hub-worker-1.service)\nchanged: [aap.demo.local] => (item=automation-hub-worker-2.service)\n\nTASK [ansible.containerized_installer.automationhub : Add firewalld rules] *****\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/firewalld.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationhub : Manage automation hub firewalld ports] ***\nskipping: [aap.demo.local] => (item=8081) \nskipping: [aap.demo.local] => (item=8444) \nskipping: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.automationhub : Restart hub api] ***\nchanged: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.automationhub : Restart hub content] ***\nchanged: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.automationhub : Restart hub web] ***\nchanged: [aap.demo.local]\n\nRUNNING HANDLER [ansible.containerized_installer.automationhub : Restart hub workers] ***\nchanged: [aap.demo.local] => (item=1)\nchanged: [aap.demo.local] => (item=2)\n\nPLAY [Merge components organization to gateway] ********************************\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway hostname, port(s) and protocol] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add https port to gateway port list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add https port to gateway proxy port list] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Combine gateway ports] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway URL] *****\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway IPs] *****\nok: [aap.demo.local] => (item=172.31.3.97)\nok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)\n\nTASK [ansible.containerized_installer.automationgateway : Add postgresql container to requires when on the same node] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway redis hostname] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway redis proto/host facts] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set gateway redis url facts] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Append redis database when standalone] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set redis cluster hostnames] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set automation gateway volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add postgresql password secret to secrets] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add postgresql socket directory to common automation gateway volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set web automation gateway and proxy volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add postgresql tls to automation gateway volumes] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add tls to automation gateway volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add tls to automation gateway proxy volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Add redis tls to automation gateway volumes] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Render proxy variables] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Set systemd requires] ***\nok: [aap.demo.local]\n\nTASK [Migrate component resources] *********************************************\n\nTASK [ansible.containerized_installer.automationgateway : Ensure automation gateway proxy is ready] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Merge controller organization] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/data_migration.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Merge organization] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Merge eda organization] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/data_migration.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Merge organization] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationgateway : Merge hub organization] ***\nincluded: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/data_migration.yml for aap.demo.local\n\nTASK [ansible.containerized_installer.automationgateway : Merge organization] ***\nchanged: [aap.demo.local]\n\nPLAY [Trust the Automation Hub registry] ***************************************\n\nTASK [ansible.containerized_installer.common : Create the hub registry directory] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Create the hub registry directory alias] ***\nchanged: [aap.demo.local]\n\nTASK [ansible.containerized_installer.common : Add symlink to the TLS CA bundle] ***\nchanged: [aap.demo.local]\n\nPLAY [Install and configure performance co-pilot (pcp)] ************************\n\nTASK [ansible.containerized_installer.pcp : Set pcp facts] *********************\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.pcp : Configure pcp] *********************\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.pcp : Handle container image update] *****\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.pcp : Configure containers] **************\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.pcp : Ensure pcp container is enabled and started] ***\nskipping: [aap.demo.local]\n\nTASK [ansible.containerized_installer.pcp : Add firewalld rules] ***************\nskipping: [aap.demo.local]\n\nPLAY [Run the Automation Controller postinstall] *******************************\n\nTASK [ansible.containerized_installer.automationhub : Ensure automation hub is ready] ***\nok: [aap.demo.local]\n\nTASK [ansible.containerized_installer.automationhub : Tag the container images to automation hub] ***\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest)\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest)\n\nTASK [ansible.containerized_installer.automationhub : Push the container images to automation hub] ***\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest)\nchanged: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest)\n\nTASK [ansible.containerized_installer.automationcontroller : Install the git binary] ***\nok: [aap.demo.local -> localhost]\n\nTASK [ansible.containerized_installer.automationcontroller : Clone the postinstall config repository] ***\nchanged: [aap.demo.local -> localhost]\n\nTASK [ansible.containerized_installer.automationcontroller : Include vars for automation controller] ***\nok: [aap.demo.local]\n\nTASK [Execute automation controller resource configuration] ********************\n\nTASK [infra.controller_configuration.dispatch : Validating arguments against arg spec 'main' - An Ansible Role to call other roles to create objects on Ansible Controller.] ***\nok: [aap.demo.local]\n\nTASK [Run the following infra.controller_configuration roles: settings, instances, instance_groups, organizations, labels, users, teams, credential_types, credentials, credential_input_sources, execution_environments, notification_templates, organizations, projects, inventories, inventory_sources, inventory_source_update, applications, hosts, bulk_host_create, groups, job_templates, workflow_job_templates, schedules, roles, job_launch, workflow_launch] ***\nskipping: [aap.demo.local] => (item={'role': 'settings', 'var': 'controller_settings', 'tags': 'settings'}) \nskipping: [aap.demo.local] => (item={'role': 'instances', 'var': 'controller_instances', 'tags': 'instances'}) \nskipping: [aap.demo.local] => (item={'role': 'instance_groups', 'var': 'controller_instance_groups', 'tags': 'instance_groups'}) \nskipping: [aap.demo.local] => (item={'role': 'labels', 'var': 'controller_labels', 'tags': 'labels'}) \nskipping: [aap.demo.local] => (item={'role': 'users', 'var': 'controller_user_accounts', 'tags': 'users'}) \nskipping: [aap.demo.local] => (item={'role': 'teams', 'var': 'controller_teams', 'tags': 'teams'}) \nskipping: [aap.demo.local] => (item={'role': 'credential_types', 'var': 'controller_credential_types', 'tags': 'credential_types'}) \nskipping: [aap.demo.local] => (item={'role': 'credential_input_sources', 'var': 'controller_credential_input_sources', 'tags': 'credential_input_sources'}) \nskipping: [aap.demo.local] => (item={'role': 'notification_templates', 'var': 'controller_notifications', 'tags': 'notification_templates'}) \nskipping: [aap.demo.local] => (item={'role': 'inventories', 'var': 'controller_inventories', 'tags': 'inventories'}) \nskipping: [aap.demo.local] => (item={'role': 'inventory_sources', 'var': 'controller_inventory_sources', 'tags': 'inventory_sources'}) \nskipping: [aap.demo.local] => (item={'role': 'inventory_source_update', 'var': 'controller_inventory_sources', 'tags': 'inventory_sources'}) \nskipping: [aap.demo.local] => (item={'role': 'applications', 'var': 'controller_applications', 'tags': 'applications'}) \nskipping: [aap.demo.local] => (item={'role': 'hosts', 'var': 'controller_hosts', 'tags': 'hosts'}) \nskipping: [aap.demo.local] => (item={'role': 'bulk_host_create', 'var': 'controller_bulk_hosts', 'tags': 'bulk_hosts'}) \nskipping: [aap.demo.local] => (item={'role': 'groups', 'var': 'controller_groups', 'tags': 'inventories'}) \nskipping: [aap.demo.local] => (item={'role': 'workflow_job_templates', 'var': 'controller_workflows', 'tags': 'workflow_job_templates'}) \nskipping: [aap.demo.local] => (item={'role': 'schedules', 'var': 'controller_schedules', 'tags': 'schedules'}) \nskipping: [aap.demo.local] => (item={'role': 'roles', 'var': 'controller_roles', 'tags': 'roles'}) \nskipping: [aap.demo.local] => (item={'role': 'job_launch', 'var': 'controller_launch_jobs', 'tags': 'job_launch'}) \nskipping: [aap.demo.local] => (item={'role': 'workflow_launch', 'var': 'controller_workflow_launch_jobs', 'tags': 'workflow_launch'}) \n\nTASK [infra.controller_configuration.organizations : Validating arguments against arg spec 'main' - An Ansible Role to create organizations on Ansible Controller.] ***\nok: [aap.demo.local]\n\nTASK [infra.controller_configuration.organizations : Managing Organizations] ***\nok: [aap.demo.local] => (item=Create/Update organization Default)\n\nTASK [infra.controller_configuration.organizations : Flag for errors (check mode only)] ***\nskipping: [aap.demo.local]\n\nTASK [infra.controller_configuration.organizations : Managing Controller Organizations | Wait for finish the Organizations management] ***\nFAILED - RETRYING: [aap.demo.local]: Managing Controller Organizations | Wait for finish the Organizations management (30 retries left).\nok: [aap.demo.local] => (item=Create/Update Controller Organization Default | Wait for finish the organization creation)\n\nTASK [infra.controller_configuration.credentials : Validating arguments against arg spec 'main' - An Ansible Role to create credentials on Ansible Controller.] ***\nok: [aap.demo.local]\n\nTASK [infra.controller_configuration.credentials : Managing Credentials] *******\nok: [aap.demo.local] => (item=None)\nok: [aap.demo.local] => (item=None)\nok: [aap.demo.local]\n\nTASK [infra.controller_configuration.credentials : Flag for errors (check mode only)] ***\nskipping: [aap.demo.local]\n\nTASK [infra.controller_configuration.credentials : Managing Controller Credentials | Wait for finish the credential management] ***\nFAILED - RETRYING: [aap.demo.local]: Managing Controller Credentials | Wait for finish the credential management (30 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Controller Credentials | Wait for finish the credential management (29 retries left).\nchanged: [aap.demo.local] => (item=None)\nchanged: [aap.demo.local] => (item=None)\nchanged: [aap.demo.local]\n\nTASK [infra.controller_configuration.execution_environments : Validating arguments against arg spec 'main' - An Ansible Role to create execution environment objects on Ansible Controller.] ***\nok: [aap.demo.local]\n\nTASK [infra.controller_configuration.execution_environments : Managing Controller Execution Environments] ***\nok: [aap.demo.local] => (item=Create/Update Controller Execution Environment {'name': 'Product Demos EE', 'image': 'quay.io/ansible-product-demos/apd-ee-25:latest'})\n\nTASK [infra.controller_configuration.execution_environments : Flag for errors (check mode only)] ***\nskipping: [aap.demo.local]\n\nTASK [infra.controller_configuration.execution_environments : Managing Controller Execution Environments | Wait for finish the Controller Execution Environments management] ***\nFAILED - RETRYING: [aap.demo.local]: Managing Controller Execution Environments | Wait for finish the Controller Execution Environments management (30 retries left).\nchanged: [aap.demo.local] => (item=Create/Update Controller Execution Environment Product Demos EE | Wait for finish the Controller Execution Environment creation)\n\nTASK [infra.controller_configuration.organizations : Validating arguments against arg spec 'main' - An Ansible Role to create organizations on Ansible Controller.] ***\nok: [aap.demo.local]\n\nTASK [infra.controller_configuration.organizations : Managing Organizations] ***\nok: [aap.demo.local] => (item=Create/Update organization Default)\n\nTASK [infra.controller_configuration.organizations : Flag for errors (check mode only)] ***\nskipping: [aap.demo.local]\n\nTASK [infra.controller_configuration.organizations : Managing Controller Organizations | Wait for finish the Organizations management] ***\nFAILED - RETRYING: [aap.demo.local]: Managing Controller Organizations | Wait for finish the Organizations management (30 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Controller Organizations | Wait for finish the Organizations management (29 retries left).\nchanged: [aap.demo.local] => (item=Create/Update Controller Organization Default | Wait for finish the organization creation)\n\nTASK [infra.controller_configuration.projects : Validating arguments against arg spec 'main' - An Ansible Role to create projects on Ansible Controller.] ***\nok: [aap.demo.local]\n\nTASK [infra.controller_configuration.projects : Managing Projects] *************\nok: [aap.demo.local] => (item=Create/Update Project Ansible Product Demos)\n\nTASK [infra.controller_configuration.projects : Flag for errors (check mode only)] ***\nskipping: [aap.demo.local]\n\nTASK [infra.controller_configuration.projects : Managing Projects | Wait for finish the projects management] ***\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (30 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (29 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (28 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (27 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (26 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (25 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (24 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (23 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (22 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (21 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (20 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (19 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (18 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (17 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (16 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (15 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (14 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (13 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (12 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (11 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (10 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (9 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (8 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (7 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (6 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (5 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (4 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (3 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (2 retries left).\nFAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (1 retries left).\nfailed: [aap.demo.local] (item=Create/Update Project Ansible Product Demos | Wait for finish the project creation) => {\"__projects_job_async_results_item\": {\"__controller_project_item\": {\"default_environment\": \"Product Demos EE\", \"name\": \"Ansible Product Demos\", \"organization\": \"Default\", \"scm_branch\": \"main\", \"scm_type\": \"git\", \"scm_url\": \"https://github.com/ansible/product-demos\", \"wait\": true}, \"ansible_job_id\": \"j702731971334.50327\", \"ansible_loop_var\": \"__controller_project_item\", \"changed\": false, \"failed\": 0, \"finished\": 0, \"results_file\": \"/home/aap/.ansible_async/j702731971334.50327\", \"started\": 1}, \"ansible_job_id\": \"j702731971334.50327\", \"ansible_loop_var\": \"__projects_job_async_results_item\", \"attempts\": 30, \"changed\": false, \"finished\": 0, \"results_file\": \"/home/aap/.ansible_async/j702731971334.50327\", \"started\": 1, \"stderr\": \"\", \"stderr_lines\": [], \"stdout\": \"\", \"stdout_lines\": []}\n\nNO MORE HOSTS LEFT *************************************************************\n\nPLAY RECAP *********************************************************************\naap.demo.local             : ok=633  changed=227  unreachable=0    failed=1    skipped=263  rescued=0    ignored=0   \nlocalhost                  : ok=34   changed=0    unreachable=0    failed=0    skipped=55   rescued=0    ignored=0   ", "stdout_lines": ["", "PLAY [Preflight checks] ********************************************************", "", "TASK [Gather facts] ************************************************************", "ok: [localhost]", "", "TASK [ansible.containerized_installer.common : Test for ostree-based OS] *******", "ok: [localhost]", "", "TASK [ansible.containerized_installer.common : Set ostree-based OS fact] *******", "ok: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure registry username and password are provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Include database checks] *****", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/database.yml for localhost", "", "TASK [ansible.containerized_installer.preflight : Ensure postgresql admin user and password are not empty when provided] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure only one managed database] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure postgresql admin username is postgres if provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure postgresql admin password is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Check the postgresql_effective_cache_size format] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check the postgresql_shared_buffers format] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure postgresql password encryption is valid] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Include redis checks] ********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/redis.yml for localhost", "", "TASK [ansible.containerized_installer.preflight : Ensure redis mode is a valid choice] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure redis cluster is correctly configured] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Include controller checks] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/automationcontroller.yml for localhost", "", "TASK [ansible.containerized_installer.preflight : Ensure controller admin password is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure controller postgresql sslmode is a valid choice] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure controller_percent_memory_capacity valid choice] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure controller postgresql host is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure controller postgresql password is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure using an external database] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure controller TLS certificate/key are provided] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure controller TLS certificate/key are provided with postgresql authentication enabled] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check the license file presence] ***", "ok: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Validate that the license file exists] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure controller license file is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure controller postinstall dir is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Check the controller postinstall directory] ***", "ok: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Validate that the postinstall directory exists] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check EE extra images structure] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Include hub checks] **********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/automationhub.yml for localhost", "", "TASK [ansible.containerized_installer.preflight : Ensure hub admin password is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure hub postgresql sslmode is a valid choice] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure hub postgresql host is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure hub postgresql password is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure using an external database] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure hub TLS certificate/key are provided] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure hub TLS certificate/key are provided with postgresql authentication enabled] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure hub storage backend is a valid choice] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure address for shared hub data storage is provided for multi-instance] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure Azure blob storage variables are provided] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure AWS S3 storage variables are provided] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure hub_galaxy_importer structure is valid] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure automation hub url format when provided] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure hub postinstall directory is provided] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check the hub postinstall directory] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Validate that the postinstall directory exists] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check the collection signing when using collections auto sign] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check the automation hub collection signing key] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check the automation hub collection signing key file] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Validate that automation hub collection signing key file exists] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check the automation hub collection signing key passphrase] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check the automation hub container signing key] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check the automation hub container signing key file] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Validate that automation hub container signing key file exists] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check the automation hub container signing key passphrase] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure gnupg directory exists] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Include eda checks] **********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/automationeda.yml for localhost", "", "TASK [ansible.containerized_installer.preflight : Ensure eda admin password is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure eda postgresql sslmode is a valid choice] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure eda postgresql host is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure eda postgresql password is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure using an external database] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure eda TLS certificate/key are provided] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure eda TLS certificate/key are provided with postgresql authentication enabled] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure eda_max_running_activations in a positive integer] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure eda type is a valid choice] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure api, event-stream and worker node exist when no hybrid] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check DE extra images structure] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure automation eda event-stream url format when provided] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Include receptor checks] *****", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Include gateway checks] ******", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/automationgateway.yml for localhost", "", "TASK [ansible.containerized_installer.preflight : Ensure a gateway node is present] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure gateway admin password is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure gateway postgresql sslmode is a valid choice] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure gateway postgresql host is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure gateway postgresql password is provided] ***", "ok: [localhost] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure using an external database] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure gateway TLS certificate/key are provided] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure gateway TLS certificate/key are provided with postgresql authentication enabled] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure automation gateway url format when provided] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure bundle_dir is provided] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check the images directory] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure the images directory exists] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Check the collections directory] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure the collections directory exists] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure feature_flags is a dictonary] ***", "skipping: [localhost]", "", "TASK [ansible.containerized_installer.preflight : Ensure feature_flags keys/values are valid] ***", "skipping: [localhost]", "", "PLAY [Preflight node checks] ***************************************************", "", "TASK [Gather facts] ************************************************************", "ok: [aap.demo.local]", "", "TASK [Gather regular user id, uid and home dir] ********************************", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure remote user is non root] ***", "ok: [aap.demo.local] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure automation controller remote user id is higher than or equal to 500] ***", "ok: [aap.demo.local] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Ensure remote nodes use supported distribution] ***", "ok: [aap.demo.local] => {", "    \"changed\": false,", "    \"msg\": \"All assertions passed\"", "}", "", "TASK [ansible.containerized_installer.preflight : Check CA TLS configuration] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Install python-cryptography] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation controller TLS configuration] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Install python-cryptography] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation controller postgresql TLS configuration] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation controller external postgresql configuration] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation controller external postgresql configuration] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation hub TLS configuration] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Install python-cryptography] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation hub postgresql TLS configuration] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation hub external postgresql configuration] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation hub external postgresql configuration] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation eda TLS configuration] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Install python-cryptography] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation eda redis TLS configuration] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Install python-cryptography] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation eda postgresql TLS configuration] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation eda external postgresql configuration] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation eda external postgresql configuration] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation gateway TLS configuration] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Install python-cryptography] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation gateway redis TLS configuration] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Install python-cryptography] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation gateway postgresql TLS configuration] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation gateway external postgresql configuration] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check automation gateway external postgresql configuration] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check redis TLS configuration] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Install python-cryptography] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check postgresql TLS configuration] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Install python-cryptography] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Check receptor TLS configuration] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/preflight/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.preflight : Ensure both TLS certificate and key are provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS key passphrase is not empty when provided] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match (passphrase)] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Install python-cryptography] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS certificate information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get x509 TLS key information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure TLS certificate and key match] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure receptor TLS certificate uses SAN extension with OID] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Get receptor x509 TLS certificate information] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.preflight : Ensure receptor TLS certificate uses SAN extension with OID] ***", "skipping: [aap.demo.local]", "", "PLAY [Install common container components] *************************************", "", "TASK [ansible.containerized_installer.common : Get service facts] **************", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Configure sub UID/GIDs] *********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/subids.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.common : Ensure user has enough subuids in namespace] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Ensure user has enough subugids in namespace] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Run ostree tasks] ***************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/ostree.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.common : Test for ostree-based OS] *******", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Set ostree-based OS fact] *******", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Set common facts] ***************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/facts.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.common : Set the TLS CA directory fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Set io.containers.autoupdate=local label] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Set io.containers.autoupdate=registry label] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Get package Facts] **************", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Ensure container tools packages are present] ***", "skipping: [aap.demo.local] => (item=crun) ", "skipping: [aap.demo.local] => (item=podman) ", "skipping: [aap.demo.local] => (item=slirp4netns) ", "skipping: [aap.demo.local] => (item=fuse-overlayfs) ", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Ensure python3-cryptography and python3-psycopg2 python packages are present] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Ensure python3-cryptography python package is present] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Ensure python3-firewall package is present] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Install container tools] ********", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Set maxkeys] ********************", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Set maxbytes] *******************", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Create the containers config directory] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Configure podman runtime with crun] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Configure podman execution plane] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/executionplane.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.common : Create the custom podman rootless storage folder] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Create custom podman storage.conf] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Create directory for custom podman service configuration] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Configure podman service] *******", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Enable podman socket] ***********", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Create podman custom command] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Install polkit] *****************", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Ensure polkit is started] *******", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Ensure user belongs to the systemd-journald group] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Disable lingering for ansible_user] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Enable lingering for ansible_user] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Set podman version facts] *******", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/podman_facts.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.common : Get podman version] *************", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Set podman idempotence fact] ****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Include registry tasks] *********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/registry.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.common : Login to the registry] **********", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Include container image tasks] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/images.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.common : Set full container images URL] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add gateway images to the list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add controller image to the list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add receptor image to the list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add eda images to the list] *****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add hub images to the list] *****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add redis image to the list] ****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add postgresql image to the list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add performance co-pilot image to the list] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add DE images to the list] ******", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add EE images to the list] ******", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Set de_extra_images fact] *******", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add extra DE images to the ee list] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Set ee_extra_images fact] *******", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add extra EE images to the ee list] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Install compress/rsync packages] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Create temporary directory for container tarballs] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Create temporary file for rsync filter] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Create the rsync filter] ********", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Copy bundled container images] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Remove temorary rsync filter file] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Uncompress bundled container images] ***", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/gateway-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/gateway-proxy-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/controller-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/receptor-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/eda-controller-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/eda-controller-ui-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/hub-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/hub-web-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/rhel8/redis-6:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/rhel8/postgresql-15:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest) ", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Load the controlplane container images] ***", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/gateway-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/gateway-proxy-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/controller-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/receptor-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/eda-controller-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/eda-controller-ui-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/hub-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/hub-web-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/rhel8/redis-6:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/rhel8/postgresql-15:latest) ", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Load the executionplane container images] ***", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest) ", "skipping: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest) ", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Remove temporary directory] *****", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Pull the controlplane container images] ***", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/gateway-rhel8:latest)", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/gateway-proxy-rhel8:latest)", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/controller-rhel8:latest)", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/receptor-rhel8:latest)", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/eda-controller-rhel8:latest)", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/eda-controller-ui-rhel8:latest)", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/hub-rhel8:latest)", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/hub-web-rhel8:latest)", "changed: [aap.demo.local] => (item=registry.redhat.io/rhel8/redis-6:latest)", "changed: [aap.demo.local] => (item=registry.redhat.io/rhel8/postgresql-15:latest)", "", "TASK [ansible.containerized_installer.common : Pull the executionplane container images] ***", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest)", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest)", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest)", "", "TASK [ansible.containerized_installer.common : Configure firewalld] ************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/firewalld.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.common : Ensure firewalld is started] ****", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Install python-firewall] ********", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Configure TLS CA] ***************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/common/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.common : Create the TLS CA directory] ****", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Install python-cryptography] ****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Generate a private key] *********", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Check the current CA certificate] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Generate a certificate signing request] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Generate a self signed x509 certificate] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Create local temporary directory] ***", "changed: [aap.demo.local -> localhost]", "", "TASK [ansible.containerized_installer.common : Fetch files locally] ************", "changed: [aap.demo.local] => (item=cert)", "changed: [aap.demo.local] => (item=key)", "", "TASK [ansible.containerized_installer.common : Copy TLS CA certificate] ********", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Copy TLS CA key] ****************", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Remove local temporary directory] ***", "changed: [aap.demo.local -> localhost]", "", "TASK [ansible.containerized_installer.common : Copy TLS CA certificate] ********", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Copy TLS CA key] ****************", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Set volumes for updating the CA trust] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Copy extra TLS CA certificates] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add extra TLS CA certificat to volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Create the PKI directories] *****", "changed: [aap.demo.local] => (item=edk2)", "changed: [aap.demo.local] => (item=java)", "changed: [aap.demo.local] => (item=pem)", "changed: [aap.demo.local] => (item=openssl)", "", "RUNNING HANDLER [ansible.containerized_installer.common : Update CA trust] *****", "changed: [aap.demo.local]", "", "PLAY [Install the database] ****************************************************", "", "TASK [ansible.containerized_installer.postgresql : Set postgresql facts] *******", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/facts.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.postgresql : Set postgresql hostname] ****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Set postgresql IPs] *********", "ok: [aap.demo.local] => (item=172.31.3.97)", "ok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)", "", "TASK [ansible.containerized_installer.postgresql : Set postgresql volumes] *****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Add tls to volumes] *********", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Set effective cache size fact for dedicated database node] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Set effective cache size fact for collocated database node] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Set shared buffers fact for dedicated database node] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Set shared buffers fact for collocated database node] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Configure podman secrets] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/secrets.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.postgresql : Create the postgresql admin password secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Create podman volumes] ******", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/volumes.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.postgresql : Manage the postgresql data volume] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Configure TLS] **************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.postgresql : Create the postgresql config directory] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Install python-cryptography] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Check the current postgresql private key] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Generate a private key] *****", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Check the current postgresql certificate] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Generate a certificate signing request] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Generate a self signed x509 certificate] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Copy postgresql TLS certificate] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Copy postgresql TLS key] ****", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Configure postgresql] *******", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/config.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.postgresql : Create the postgresql configuration] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Handle container image update] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/update.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.postgresql : Get postgresql container information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Get postgresql image information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Set postgresql update fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Stop postgresql service on update] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Configure containers] *******", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/containers.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.postgresql : Create the postgresql container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Ensure postgresql container is enabled and started] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/systemd.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.postgresql : Manage postgresql container via systemd] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.postgresql : Add firewalld rules] ********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/postgresql/tasks/firewalld.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.postgresql : Manage postgresql firewalld port] ***", "skipping: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.postgresql : Restart postgresql] ***", "changed: [aap.demo.local]", "", "PLAY [Install redis cluster cache] *********************************************", "skipping: no hosts matched", "", "PLAY [Install the redis cache] *************************************************", "", "TASK [Install and configure redis unix socket] *********************************", "", "TASK [ansible.containerized_installer.redis : Set redis facts] *****************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/facts.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Set redis hostname] **************", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Set redis IPs] *******************", "ok: [aap.demo.local] => (item=172.31.3.97)", "ok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)", "", "TASK [ansible.containerized_installer.redis : Set redis cluster IPs] ***********", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Set redis volumes] ***************", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Add redis nodes file when cluster] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Add runtime directory volume] ****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Add redis ACL file to volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Add tls to volumes] **************", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Set redis user password facts] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Create podman volumes] ***********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/volumes.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Manage the redis data volume] ****", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Manage the redis run volume] *****", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Configure redis] *****************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/config.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Create the redis config directory] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Create the redis configuration file] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Create the redis user ACL file] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Create redis nodes file] *********", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Configure TLS] *******************", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Handle container image update] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/update.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Get redis container information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Get redis image information] *****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Set redis update fact] ***********", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Stop redis service on update] ****", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Configure containers] ************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/containers.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Create the redis container] ******", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Ensure redis container is enabled and started] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/systemd.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Manage redis container via systemd] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Add firewalld rules] *************", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Initialize the redis cluster] ****", "skipping: [aap.demo.local]", "", "TASK [Install and configure redis tcp socket] **********************************", "", "TASK [ansible.containerized_installer.redis : Set redis facts] *****************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/facts.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Set redis hostname] **************", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Set redis IPs] *******************", "ok: [aap.demo.local] => (item=172.31.3.97)", "ok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)", "", "TASK [ansible.containerized_installer.redis : Set redis cluster IPs] ***********", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Set redis volumes] ***************", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Add redis nodes file when cluster] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Add runtime directory volume] ****", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Add redis ACL file to volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Add tls to volumes] **************", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Set redis user password facts] ***", "ok: [aap.demo.local -> localhost]", "", "TASK [ansible.containerized_installer.redis : Create podman volumes] ***********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/volumes.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Manage the redis data volume] ****", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Manage the redis run volume] *****", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Configure redis] *****************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/config.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Create the redis config directory] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Create the redis configuration file] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Create the redis user ACL file] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Create redis nodes file] *********", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Configure TLS] *******************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Install python-cryptography] *****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Check the current redis private key] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Generate a private key] **********", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Check the current redis certificate] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Generate a certificate signing request] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Generate a self signed x509 certificate] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Copy redis TLS certificate] ******", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Copy redis TLS key] **************", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Handle container image update] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/update.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Get redis container information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Get redis image information] *****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Set redis update fact] ***********", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Stop redis service on update] ****", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Configure containers] ************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/containers.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Create the redis container] ******", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Ensure redis container is enabled and started] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/systemd.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Manage redis container via systemd] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Add firewalld rules] *************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/redis/tasks/firewalld.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.redis : Manage redis firewalld port] *****", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Manage redis firewalld cluster port] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.redis : Initialize the redis cluster] ****", "skipping: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.redis : Restart redis] ********", "changed: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.redis : Restart redis] ********", "changed: [aap.demo.local]", "", "PLAY [Get Automation Controller configuration for gateway] *********************", "", "TASK [ansible.containerized_installer.automationcontroller : Set controller hostname, port(s) and protocol] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Add https port to controller port list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set controller URL] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set controller IPs] ***", "ok: [aap.demo.local] => (item=172.31.3.97)", "ok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)", "", "TASK [ansible.containerized_installer.automationcontroller : Add postgresql container to requires when on the same node] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set automation controller volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Add postgresql tls to automation controller volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Add postgresql socket directory to common automation controller volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set rsyslog/task/web automation controller volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Add tls to web automation controller volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set systemd requires] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set environment variables for recent AAP releases] ***", "ok: [aap.demo.local]", "", "PLAY [Get Automation EDA configuration for gateway] ****************************", "", "TASK [ansible.containerized_installer.automationeda : Set eda hostname, port(s) and protocol] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set eda redis hostname] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add https port to eda port list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set eda URL] *************", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set eda IPs] *************", "ok: [aap.demo.local] => (item=172.31.3.97)", "ok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)", "", "TASK [ansible.containerized_installer.automationeda : Set decision environment facts] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Remove redis container dependency when using multiple nodes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add postgresql container to requires when on the same node] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set automation eda env and volume facts] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add postgresql password secret to secrets] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add postgresql tls to common automation eda volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add postgresql socket directory to common automation eda volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add redis password to secrets] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set scheduler/web/worker automation eda env/volumes/secrets] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add tls to web automation eda volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Use local redis instance with single node] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add redis tls to api/scheduler/workers automation eda volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set redis cluster hostnames] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set eda rulebook queue name] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set systemd requires] ****", "ok: [aap.demo.local]", "", "PLAY [Get Automation Hub configuration for gateway] ****************************", "", "TASK [ansible.containerized_installer.automationhub : Set hub hostname, port(s) and protocol] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add https port to hub port list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set hub IPs] *************", "ok: [aap.demo.local] => (item=172.31.3.97)", "ok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)", "", "TASK [ansible.containerized_installer.automationhub : Add postgresql container to requires when on the same node] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set automation hub volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add hub tmp volume when using NFS] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add postgresql socket directory to common automation hub volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add postgresql tls to automation hub volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set api/content/worker automation hub volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add galaxy importer to worker volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add tls to web automation hub volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add collection volume to automation worker volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add collection secret to automation worker secrets] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add container volume to automation worker volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add container secret to automation worker secrets] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set systemd requires] ****", "ok: [aap.demo.local]", "", "PLAY [Install the Automation Gateway] ******************************************", "", "TASK [ansible.containerized_installer.automationgateway : Set automation gateway facts] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/facts.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway hostname, port(s) and protocol] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add https port to gateway port list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add https port to gateway proxy port list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Combine gateway ports] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway URL] *****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway IPs] *****", "ok: [aap.demo.local] => (item=172.31.3.97)", "ok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)", "", "TASK [ansible.containerized_installer.automationgateway : Add postgresql container to requires when on the same node] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway redis hostname] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway redis proto/host facts] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway redis url facts] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Append redis database when standalone] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set redis cluster hostnames] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set automation gateway volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add postgresql password secret to secrets] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add postgresql socket directory to common automation gateway volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set web automation gateway and proxy volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add postgresql tls to automation gateway volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add tls to automation gateway volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add tls to automation gateway proxy volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add redis tls to automation gateway volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Render proxy variables] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set systemd requires] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Create podman volumes] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/volumes.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Manage the Automation Gateway nginx volume] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Configure postgresql] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/postgresql.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Install python-psycopg2] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Wait for postgresql to be ready] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Create the automation gateway postgresql user] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Grant the automation gateway role to postgresql admin user] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Create the automation gateway postgresql database] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Configure automation gateway] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/config.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Create the gateway directories] ***", "changed: [aap.demo.local] => (item=/home/aap/aap/gatewayproxy/etc)", "changed: [aap.demo.local] => (item=/home/aap/aap/gateway/nginx/etc)", "changed: [aap.demo.local] => (item=/home/aap/aap/gateway/etc)", "", "TASK [ansible.containerized_installer.automationgateway : Create the envoy configuration] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Check current somaxconn value] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Check current net.ipv4.tcp_max_syn_backlog value] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set somaxconn to value greater than or equal to gateway_uwsgi_listen_queue_size in supervisor config] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set tcp_max_syn_backlog to value greater than or equal to gateway_uwsgi_listen_queue_size in supervisor config] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Create the uwsgi configuration] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Create the gateway django settings override file] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Configure TLS or nginx] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Install python-cryptography] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Check the current gateway private key] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Generate a private key] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Check the current gateway certificate] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Generate a certificate signing request] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Generate a self signed x509 certificate] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Copy gateway TLS certificate] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Copy gateway TLS key] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Configure TLS for redis] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/tls_redis.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Install python-cryptography] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Check the current gateway redis private key] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Generate a private key for redis] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Check the current gateway redis certificate] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Generate a certificate signing request for redis] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Generate a self signed x509 certificate for redis] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Copy redis TLS certificate] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Copy redis TLS key] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Configure TLS for postgresql] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Configure nginx] *****", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/nginx.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Get sysctl net.ipv4.ip_unprivileged_port_start setting] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Allow rootless automation gateway containers to bind from port 80 onwards] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Create the nginx configuration] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Configure supervisor] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/supervisor.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Create the supervisor directory] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Create the supervisor configuration] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Configure podman secrets] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/secrets.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Get all podman secrets] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Create the gateway admin password secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Create the gateway db_password secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Create the gateway redis url secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Get the existing gateway secret key secret] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set the gateway secret key secret fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Create the gateway secret_key secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Get all podman secrets after update] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway recreate container fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Handle container image update] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/update.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Get gateway container information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Get gateway image information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway update fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Stop gateway service on update] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Configure containers] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/containers.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Create the automation gateway proxy container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Create the automation gateway container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Initialize data] *****", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/init.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Initialize the automation gateway database] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Create django super user] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Update django super user password] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Initialize authenticators] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Ensure automation gateway containers are enabled and started] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/systemd.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Set facts for systemd services] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Manage automation gateway containers via systemd] ***", "changed: [aap.demo.local] => (item=automation-gateway.service)", "changed: [aap.demo.local] => (item=automation-gateway-proxy.service)", "", "TASK [ansible.containerized_installer.automationgateway : Add firewalld rules] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/firewalld.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Manage automation gateway firewalld ports] ***", "skipping: [aap.demo.local] => (item=8083) ", "skipping: [aap.demo.local] => (item=8446) ", "skipping: [aap.demo.local] => (item=80) ", "skipping: [aap.demo.local] => (item=443) ", "skipping: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.automationgateway : Restart automation gateway proxy] ***", "changed: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.automationgateway : Restart automation gateway] ***", "changed: [aap.demo.local]", "", "PLAY [Run the Automation Gateway postinstall] **********************************", "", "TASK [ansible.containerized_installer.automationgateway : Ensure automation gateway is ready] ***", "FAILED - RETRYING: [aap.demo.local]: Ensure automation gateway is ready (30 retries left).", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Update automation platform gateway settings] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Update automation platform gateway http ports] ***", "changed: [aap.demo.local] => (item={'name': 'port-443', 'number': 443, 'use_https': True, 'is_api_port': True})", "", "TASK [ansible.containerized_installer.automationgateway : Update automation platform gateway service clusters] ***", "changed: [aap.demo.local] => (item={'name': 'gateway', 'service_type': 'gateway'})", "changed: [aap.demo.local] => (item={'name': 'controller', 'service_type': 'controller'})", "changed: [aap.demo.local] => (item={'name': 'hub', 'service_type': 'hub'})", "changed: [aap.demo.local] => (item={'name': 'eda', 'service_type': 'eda'})", "", "TASK [ansible.containerized_installer.automationgateway : Update automation platform gateway service nodes] ***", "changed: [aap.demo.local] => (item={'name': 'Node gateway - aap.demo.local', 'service_cluster': 'gateway', 'address': 'aap.demo.local'})", "changed: [aap.demo.local] => (item={'name': 'Node controller - aap.demo.local', 'service_cluster': 'controller', 'address': 'aap.demo.local'})", "changed: [aap.demo.local] => (item={'name': 'Node hub - aap.demo.local', 'service_cluster': 'hub', 'address': 'aap.demo.local'})", "changed: [aap.demo.local] => (item={'name': 'Node eda - aap.demo.local', 'service_cluster': 'eda', 'address': 'aap.demo.local', 'tags': 'eda-hybrid'})", "", "TASK [ansible.containerized_installer.automationgateway : Update automation platform gateway services] ***", "changed: [aap.demo.local] => (item={'name': 'gateway api', 'api_slug': 'gateway', 'http_port': 'port-443', 'service_cluster': 'gateway', 'is_service_https': True, 'service_path': '/', 'service_port': 8446, 'order': 100, 'enable_gateway_auth': False})", "changed: [aap.demo.local] => (item={'name': 'controller api', 'api_slug': 'controller', 'http_port': 'port-443', 'service_cluster': 'controller', 'is_service_https': True, 'service_path': '/api/controller/', 'service_port': 8443, 'order': 1})", "changed: [aap.demo.local] => (item={'name': 'galaxy api', 'api_slug': 'galaxy', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_path': '/api/galaxy/', 'service_port': 8444, 'order': 2})", "changed: [aap.demo.local] => (item={'name': 'eda api', 'api_slug': 'eda', 'http_port': 'port-443', 'service_cluster': 'eda', 'is_service_https': True, 'service_path': '/api/eda/', 'service_port': 8445, 'order': 3})", "", "TASK [ansible.containerized_installer.automationgateway : Update automation platform gateway routes] ***", "changed: [aap.demo.local] => (item={'name': 'hub container registry', 'description': 'Hub Container Registry.', 'gateway_path': '/v2/', 'service_path': '/v2/', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_port': 8444, 'enable_gateway_auth': True})", "changed: [aap.demo.local] => (item={'name': 'hub ui', 'description': 'Hub UI', 'gateway_path': '/ui/', 'service_path': '/ui/', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_port': 8444, 'enable_gateway_auth': True})", "changed: [aap.demo.local] => (item={'name': 'hub ui static files', 'description': 'Hub UI Static Files', 'gateway_path': '/static/galaxy_ng/', 'service_path': '/static/galaxy_ng/', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_port': 8444, 'enable_gateway_auth': True})", "changed: [aap.demo.local] => (item={'name': 'pulp content', 'description': 'Pulp Content', 'gateway_path': '/pulp', 'service_path': '/pulp', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_port': 8444, 'enable_gateway_auth': True})", "changed: [aap.demo.local] => (item={'name': 'pulp container tokens', 'description': 'Pulp Container Tokens', 'gateway_path': '/token', 'service_path': '/token', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_port': 8444, 'enable_gateway_auth': True})", "changed: [aap.demo.local] => (item={'name': 'pulp container extensions', 'description': 'Pulp Container Extensions', 'gateway_path': '/extensions', 'service_path': '/extensions', 'http_port': 'port-443', 'service_cluster': 'hub', 'is_service_https': True, 'service_port': 8444, 'enable_gateway_auth': True})", "changed: [aap.demo.local] => (item={'name': 'Event Driven Automation Event Stream', 'description': 'Proxy to the EDA Event Streams', 'gateway_path': '/eda-event-streams/', 'service_path': '/', 'http_port': 'port-443', 'service_cluster': 'eda', 'is_service_https': True, 'service_port': 8445, 'enable_gateway_auth': False, 'node_tags': 'eda-hybrid,eda-event-stream'})", "", "TASK [ansible.containerized_installer.automationgateway : Get all controller podman secrets] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Generate controller service key] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/service_key.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Generate service key] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set controller service key fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Get all eda podman secrets] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Generate eda service key] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/service_key.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Generate service key] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set eda service key fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Get all hub podman secrets] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Generate hub service key] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/service_key.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Generate service key] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set hub service key fact] ***", "ok: [aap.demo.local]", "", "PLAY [Install and configure receptor] ******************************************", "", "TASK [ansible.containerized_installer.receptor : Set receptor facts] ***********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/facts.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.receptor : Set receptor node type for controller] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Set receptor hostname, port and protocol facts] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Set controller mesh peers] ****", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Set receptor peers for controller] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Set receptor peers fact] ******", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Set receptor IPs] *************", "ok: [aap.demo.local] => (item=172.31.3.97)", "ok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)", "", "TASK [ansible.containerized_installer.receptor : Set receptor volume facts] ****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Add tls to volumes] ***********", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Add signing private key to volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Add signing public key to volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Set _receptor_volumes and _registry_auth_file facts] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Configure receptor] ***********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/config.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.receptor : Create the receptor directory] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Create the controller directories] ***", "changed: [aap.demo.local] => (item=/home/aap/aap/controller/data/job_execution)", "changed: [aap.demo.local] => (item=/home/aap/aap/controller/data/projects)", "", "TASK [ansible.containerized_installer.receptor : Create the receptor configuration] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Create podman volumes] ********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/volumes.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.receptor : Manage the receptor volumes] ***", "changed: [aap.demo.local] => (item=receptor_run)", "changed: [aap.demo.local] => (item=receptor_runner)", "changed: [aap.demo.local] => (item=receptor_home)", "changed: [aap.demo.local] => (item=receptor_data)", "", "TASK [ansible.containerized_installer.receptor : Configure TLS] ****************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.receptor : Install python-cryptography] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Check the current receptor private key] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Generate a private key] *******", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Check the current receptor certificate] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Generate a certificate signing request] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Generate a self signed x509 certificate] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Copy receptor TLS certificate] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Copy receptor TLS key] ********", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Configure signing] ************", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/signing.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.receptor : Install python-cryptography] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Generate a RSA private key] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Generate a RSA public key] ****", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Create local temporary directory] ***", "changed: [aap.demo.local -> localhost]", "", "TASK [ansible.containerized_installer.receptor : Fetch files locally] **********", "changed: [aap.demo.local] => (item=private)", "changed: [aap.demo.local] => (item=public)", "", "TASK [ansible.containerized_installer.receptor : Copy RSA public key] **********", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Copy RSA private key] *********", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Remove local temporary directory] ***", "changed: [aap.demo.local -> localhost]", "", "TASK [ansible.containerized_installer.receptor : Copy receptor signing RSA public key] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Copy receptor signing RSA private key] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Handle container image update] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/update.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.receptor : Get receptor container information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Get receptor image information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Set receptor update fact] *****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Stop receptor service on update] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Configure containers] *********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/containers.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.receptor : Create the receptor container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Ensure receptor container is enabled and started] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/receptor/tasks/systemd.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.receptor : Manage receptor container via systemd] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.receptor : Add firewalld rules] **********", "skipping: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.receptor : Restart receptor] ***", "changed: [aap.demo.local]", "", "PLAY [Install the Automation Controller] ***************************************", "", "TASK [ansible.containerized_installer.automationcontroller : Get automation controller version] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/version.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Get automation controller version] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set automation controller version fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set automation controller facts] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/facts.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Set controller hostname, port(s) and protocol] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Add https port to controller port list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set controller URL] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set controller IPs] ***", "ok: [aap.demo.local] => (item=172.31.3.97)", "ok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)", "", "TASK [ansible.containerized_installer.automationcontroller : Add postgresql container to requires when on the same node] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set automation controller volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Add postgresql tls to automation controller volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Add postgresql socket directory to common automation controller volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set rsyslog/task/web automation controller volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Add tls to web automation controller volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set systemd requires] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set environment variables for recent AAP releases] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create podman volumes] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/volumes.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Manage the Automation Controller nginx volume] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the controller directories] ***", "changed: [aap.demo.local] => (item=/home/aap/aap/controller/etc/conf.d)", "ok: [aap.demo.local] => (item=/home/aap/aap/controller/data/job_execution)", "changed: [aap.demo.local] => (item=/home/aap/aap/controller/data/logs)", "ok: [aap.demo.local] => (item=/home/aap/aap/controller/data/projects)", "changed: [aap.demo.local] => (item=/home/aap/aap/controller/data/rsyslog)", "", "TASK [ansible.containerized_installer.automationcontroller : Configure postgresql] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/postgresql.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Install python-psycopg2] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Wait for postgresql to be ready] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the automation controller postgresql user] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Grant the automation controller role to postgresql admin user] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the automation controller postgresql database] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Configure TLS] ****", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Install python-cryptography] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Check the current controller private key] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Generate a private key] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Check the current controller certificate] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Generate a certificate signing request] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Generate a self signed x509 certificate] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Copy controller TLS certificate] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Copy controller TLS key] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Configure TLS for postgresql] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Configure nginx] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/nginx.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Get sysctl net.ipv4.ip_unprivileged_port_start setting] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Allow rootless container to bind from port 80 onwards] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the nginx directory] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the nginx configuration] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the redirect page] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Configure rsyslog] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/rsyslog.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Create the rsyslog directory] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Configure supervisor] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/supervisor.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Create the supervisor directory] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Configure podman secrets] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/secrets.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Get all podman secrets] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Get the existing controller websocket secret] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set the controller channels secret fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Get the existing controller secret key secret] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set the controller secret key secret fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Get the existing controller resource server secret] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set the controller resource server secret fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the controller channels secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the controller postgres secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the controller SECRET_KEY secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the controller resource server secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Get all podman secrets after update] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set controller recreate container fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the controller configuration] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the controller extra configurations] ***", "changed: [aap.demo.local] => (item=callback_receiver_workers)", "changed: [aap.demo.local] => (item=cluster_host_id)", "changed: [aap.demo.local] => (item=container_groups)", "changed: [aap.demo.local] => (item=execution_environments)", "changed: [aap.demo.local] => (item=insights)", "changed: [aap.demo.local] => (item=redis)", "changed: [aap.demo.local] => (item=subscription_usage_model)", "", "TASK [ansible.containerized_installer.automationcontroller : Check current somaxconn value] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Check current net.ipv4.tcp_max_syn_backlog value] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set somaxconn to value greater than or equal to controller_uwsgi_listen_queue_size in supervisor config] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set tcp_max_syn_backlog to value greater than or equal to controller_uwsgi_listen_queue_size in supervisor config] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the controller uwsgi configuration] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create task custom command] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Handle container image update] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/update.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Get controller container information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Get controller image information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set controller update fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Stop controller service on update] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Configure containers] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/containers.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Create the automation controller rsyslog container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the automation controller task container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the automation controller web container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Initialize data] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/init.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Initialize the automation controller database] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the default execution environments] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Register the controller instance in the database] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Register the execution/hop instances in the database] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Set the receptor listener port] ***", "changed: [aap.demo.local] => (item=aap.demo.local)", "", "TASK [ansible.containerized_installer.automationcontroller : Register controller peers in the database] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Register other peers in the database] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Register controller nodes to default queue] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Register execution nodes to default queue] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Register controller nodes to controlplane queue] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Register execution nodes to executionplane queue] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create django super user] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Update django super user password] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create the default organization] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Ensure automation controller containers are enabled and started] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/systemd.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Set facts for systemd services] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Ensure automation controller containers are enabled and started] ***", "changed: [aap.demo.local] => (item=automation-controller-task.service)", "changed: [aap.demo.local] => (item=automation-controller-web.service)", "changed: [aap.demo.local] => (item=automation-controller-rsyslog.service)", "", "TASK [ansible.containerized_installer.automationcontroller : Add firewalld rules] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/firewalld.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Manage automation controller firewalld ports] ***", "skipping: [aap.demo.local] => (item=8080) ", "skipping: [aap.demo.local] => (item=8443) ", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Configure the license] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationcontroller/tasks/license.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationcontroller : Wait for the Web port to be reachable] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Wait for the Controller API to te ready] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Create a tmp file for the license] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Copy the license file] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Add Automation Controller subscription] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationcontroller : Delete the tmp file] ***", "changed: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.automationcontroller : Restart controller rsyslog] ***", "changed: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.automationcontroller : Restart controller task] ***", "changed: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.automationcontroller : Restart controller web] ***", "changed: [aap.demo.local]", "", "PLAY [Install the Automation EDA] **********************************************", "", "TASK [ansible.containerized_installer.automationeda : Get eda version] *********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/version.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Get eda version from container image] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set eda version fact] ****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set automation eda facts] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/facts.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Set eda hostname, port(s) and protocol] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set eda redis hostname] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add https port to eda port list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set eda URL] *************", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set eda IPs] *************", "ok: [aap.demo.local] => (item=172.31.3.97)", "ok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)", "", "TASK [ansible.containerized_installer.automationeda : Set decision environment facts] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Remove redis container dependency when using multiple nodes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add postgresql container to requires when on the same node] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set automation eda env and volume facts] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add postgresql password secret to secrets] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add postgresql tls to common automation eda volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add postgresql socket directory to common automation eda volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add redis password to secrets] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set scheduler/web/worker automation eda env/volumes/secrets] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add tls to web automation eda volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Use local redis instance with single node] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add redis tls to api/scheduler/workers automation eda volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set redis cluster hostnames] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set eda rulebook queue name] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set systemd requires] ****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Configure postgresql] ****", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/postgresql.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Install python-psycopg2] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Wait for postgresql to be ready] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the automation eda postgresql user] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Grant the automation eda role to postgresql admin user] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the automation eda postgresql database] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Configure automation EDA] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/config.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Create the eda directory] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the eda configuration file] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Configure TLS for nginx] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Install python-cryptography] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Check the current eda private key] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Generate a private key for nginx] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Check the current eda certificate] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Generate a certificate signing request for nginx] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Generate a self signed x509 certificate for nginx] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Copy eda TLS certificate] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Copy eda TLS key] ********", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Configure TLS for redis] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Configure TLS for postgresql] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Configure nginx] *********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/nginx.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Get sysctl net.ipv4.ip_unprivileged_port_start setting] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Allow rootless container to bind from port 80 onwards] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the nginx directory] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the nginx configuration] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the redirect page] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Configure podman secrets] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/secrets.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Get all podman secrets] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Get the existing eda resource server secret] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set the eda resource server secret fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Get the existing eda SECRET_KEY secret] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set the eda SECRET_KEY secret fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the eda admin password secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the eda SECRET_KEY secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the eda resource server secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the eda db password secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the eda redis password secret] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Get all podman secrets after update] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set eda recreate container fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create podman volumes] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/volumes.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Manage the automation eda data volume] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Manage the automation eda nginx volume] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Handle container image update] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/update.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Set facts for containers] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add eda workers to containers list] ***", "ok: [aap.demo.local] => (item=1)", "ok: [aap.demo.local] => (item=2)", "", "TASK [ansible.containerized_installer.automationeda : Add eda activation workers containers list] ***", "ok: [aap.demo.local] => (item=1)", "ok: [aap.demo.local] => (item=2)", "", "TASK [ansible.containerized_installer.automationeda : Get eda container information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Get eda image information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Set eda update fact] *****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Stop eda service on update] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Configure containers] ****", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/containers.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Create the automation eda api container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the automation eda daphne container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the automation eda web container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the automation eda worker container] ***", "changed: [aap.demo.local] => (item=1)", "changed: [aap.demo.local] => (item=2)", "", "TASK [ansible.containerized_installer.automationeda : Create the automation eda activation worker container] ***", "changed: [aap.demo.local] => (item=1)", "changed: [aap.demo.local] => (item=2)", "", "TASK [ansible.containerized_installer.automationeda : Create the automation eda scheduler container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Initialize data] *********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/init.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Initialize the automation eda database] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create the initial automation eda data] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create django super user] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Update django super user password] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Ensure automation eda containers are enabled and started] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/systemd.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Set facts for systemd services] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add eda daphne to systemd services list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add eda workers to systemd services list] ***", "ok: [aap.demo.local] => (item=1)", "ok: [aap.demo.local] => (item=2)", "", "TASK [ansible.containerized_installer.automationeda : Add eda activation workers to systemd services list] ***", "ok: [aap.demo.local] => (item=1)", "ok: [aap.demo.local] => (item=2)", "", "TASK [ansible.containerized_installer.automationeda : Add eda scheduler to systemd services list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Manage automation eda containers via systemd] ***", "changed: [aap.demo.local] => (item=automation-eda-api.service)", "changed: [aap.demo.local] => (item=automation-eda-web.service)", "changed: [aap.demo.local] => (item=automation-eda-daphne.service)", "changed: [aap.demo.local] => (item=automation-eda-worker-1.service)", "changed: [aap.demo.local] => (item=automation-eda-worker-2.service)", "changed: [aap.demo.local] => (item=automation-eda-activation-worker-1.service)", "changed: [aap.demo.local] => (item=automation-eda-activation-worker-2.service)", "changed: [aap.demo.local] => (item=automation-eda-scheduler.service)", "", "TASK [ansible.containerized_installer.automationeda : Add firewalld rules] *****", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/firewalld.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Manage automation eda firewalld ports] ***", "skipping: [aap.demo.local] => (item=8082) ", "skipping: [aap.demo.local] => (item=8445) ", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Add decision environments] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationeda/tasks/decision_environment.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationeda : Ensure automation eda is ready] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create automation eda registry credentials] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create automation eda decision environments] ***", "changed: [aap.demo.local] => (item={'name': 'Default Decision Environment', 'image': 'registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest'})", "", "TASK [ansible.containerized_installer.automationeda : Create automation eda registry credentials for hub] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationeda : Create automation eda decision environments for hub] ***", "changed: [aap.demo.local] => (item={'name': 'Default Decision Environment', 'image': 'registry.redhat.io/ansible-automation-platform-25/de-supported-rhel8:latest'})", "", "RUNNING HANDLER [ansible.containerized_installer.automationeda : Restart eda api] ***", "changed: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.automationeda : Restart eda daphne] ***", "changed: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.automationeda : Restart eda web] ***", "changed: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.automationeda : Restart eda workers] ***", "changed: [aap.demo.local] => (item=1)", "changed: [aap.demo.local] => (item=2)", "", "RUNNING HANDLER [ansible.containerized_installer.automationeda : Restart eda activation workers] ***", "changed: [aap.demo.local] => (item=1)", "changed: [aap.demo.local] => (item=2)", "", "RUNNING HANDLER [ansible.containerized_installer.automationeda : Restart eda scheduler] ***", "changed: [aap.demo.local]", "", "PLAY [Install the Automation Hub] **********************************************", "", "TASK [ansible.containerized_installer.automationhub : Get pulpcore version] ****", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/version.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationhub : Get pulpcore version from container image] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set pulpcore version fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set automation hub facts] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/facts.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationhub : Set hub hostname, port(s) and protocol] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add https port to hub port list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set hub IPs] *************", "ok: [aap.demo.local] => (item=172.31.3.97)", "ok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)", "", "TASK [ansible.containerized_installer.automationhub : Add postgresql container to requires when on the same node] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set automation hub volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add hub tmp volume when using NFS] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add postgresql socket directory to common automation hub volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add postgresql tls to automation hub volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set api/content/worker automation hub volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add galaxy importer to worker volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add tls to web automation hub volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add collection volume to automation worker volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add collection secret to automation worker secrets] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add container volume to automation worker volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add container secret to automation worker secrets] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set systemd requires] ****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create podman volumes] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/volumes.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationhub : Manage the Automation Hub data volume] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Manage the Automation Hub tmp volume] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Manage the Automation Hub nginx volume] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the hub directory] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Handle NFS Data directory] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Configure postgresql] ****", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/postgresql.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationhub : Install python-psycopg2] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Wait for postgresql to be ready] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the automation hub postgresql user] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Grant the automation hub role to postgresql admin user] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the automation hub postgresql database] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Enable the hstore extension on automation hub database] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Install python-cryptography] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Configure TLS] ***********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/tls.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationhub : Check the current hub private key] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Generate a private key] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Check the current hub certificate] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Generate a certificate signing request] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Generate a self signed x509 certificate] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Copy hub TLS certificate] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Copy hub TLS key] ********", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Configure TLS for postgresql] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Configure nginx] *********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/nginx.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationhub : Get sysctl net.ipv4.ip_unprivileged_port_start setting] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Allow rootless container to bind from port 80 onwards] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the nginx directory] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the nginx configuration] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the redirect page] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Configure podman secrets] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/secrets.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationhub : Get all podman secrets] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Get the existing hub resource server secret] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set the hub resource server secret fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Get the existing hub database fields secret] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set the hub database fields secret fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the hub settings secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the hub database fields secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the collection signing key passphrase secret] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the container signing key passphrase secret] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the hub resource server secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Get the existing hub secret key secret] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set the hub secret key secret fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the hub secret key secret] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Get all podman secrets after update] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set hub recreate container fact] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Configure collection signing] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Configure container signing] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Generate the container authentication private key] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Generate the container authentication public key] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Copy the container authentication private key to all nodes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Copy the the container authentication public key to all nodes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Generate galaxy importer configuration] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Handle container image update] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/update.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationhub : Set facts for containers] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add hub workers to containers list] ***", "ok: [aap.demo.local] => (item=1)", "ok: [aap.demo.local] => (item=2)", "", "TASK [ansible.containerized_installer.automationhub : Get hub container information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Get hub image information] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Set hub update fact] *****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Stop hub service on update] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Configure containers] ****", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/containers.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationhub : Create the automation hub api container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the automation hub content container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the automation hub web container] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Create the automation hub worker container] ***", "changed: [aap.demo.local] => (item=1)", "changed: [aap.demo.local] => (item=2)", "", "TASK [ansible.containerized_installer.automationhub : Initialize data] *********", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/init.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationhub : Initialize the automation hub database] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Update admin user password] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Schedule resource sync task] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add the collection signing service] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add the container signing service] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Ensure automation hub containers are enabled and started] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/systemd.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationhub : Set facts for systemd services] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Add hub workers to systemd services list] ***", "ok: [aap.demo.local] => (item=1)", "ok: [aap.demo.local] => (item=2)", "", "TASK [ansible.containerized_installer.automationhub : Manage automation hub container via systemd] ***", "changed: [aap.demo.local] => (item=automation-hub-api.service)", "changed: [aap.demo.local] => (item=automation-hub-content.service)", "changed: [aap.demo.local] => (item=automation-hub-web.service)", "changed: [aap.demo.local] => (item=automation-hub-worker-1.service)", "changed: [aap.demo.local] => (item=automation-hub-worker-2.service)", "", "TASK [ansible.containerized_installer.automationhub : Add firewalld rules] *****", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationhub/tasks/firewalld.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationhub : Manage automation hub firewalld ports] ***", "skipping: [aap.demo.local] => (item=8081) ", "skipping: [aap.demo.local] => (item=8444) ", "skipping: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.automationhub : Restart hub api] ***", "changed: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.automationhub : Restart hub content] ***", "changed: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.automationhub : Restart hub web] ***", "changed: [aap.demo.local]", "", "RUNNING HANDLER [ansible.containerized_installer.automationhub : Restart hub workers] ***", "changed: [aap.demo.local] => (item=1)", "changed: [aap.demo.local] => (item=2)", "", "PLAY [Merge components organization to gateway] ********************************", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway hostname, port(s) and protocol] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add https port to gateway port list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add https port to gateway proxy port list] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Combine gateway ports] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway URL] *****", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway IPs] *****", "ok: [aap.demo.local] => (item=172.31.3.97)", "ok: [aap.demo.local] => (item=fe80::d5:37ff:fe65:d5b3)", "", "TASK [ansible.containerized_installer.automationgateway : Add postgresql container to requires when on the same node] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway redis hostname] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway redis proto/host facts] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set gateway redis url facts] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Append redis database when standalone] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set redis cluster hostnames] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set automation gateway volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add postgresql password secret to secrets] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add postgresql socket directory to common automation gateway volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set web automation gateway and proxy volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add postgresql tls to automation gateway volumes] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add tls to automation gateway volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add tls to automation gateway proxy volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Add redis tls to automation gateway volumes] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Render proxy variables] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Set systemd requires] ***", "ok: [aap.demo.local]", "", "TASK [Migrate component resources] *********************************************", "", "TASK [ansible.containerized_installer.automationgateway : Ensure automation gateway proxy is ready] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Merge controller organization] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/data_migration.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Merge organization] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Merge eda organization] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/data_migration.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Merge organization] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationgateway : Merge hub organization] ***", "included: /tmp/ansible-automation-platform-containerized-setup-2.5-13/collections/ansible_collections/ansible/containerized_installer/roles/automationgateway/tasks/data_migration.yml for aap.demo.local", "", "TASK [ansible.containerized_installer.automationgateway : Merge organization] ***", "changed: [aap.demo.local]", "", "PLAY [Trust the Automation Hub registry] ***************************************", "", "TASK [ansible.containerized_installer.common : Create the hub registry directory] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Create the hub registry directory alias] ***", "changed: [aap.demo.local]", "", "TASK [ansible.containerized_installer.common : Add symlink to the TLS CA bundle] ***", "changed: [aap.demo.local]", "", "PLAY [Install and configure performance co-pilot (pcp)] ************************", "", "TASK [ansible.containerized_installer.pcp : Set pcp facts] *********************", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.pcp : Configure pcp] *********************", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.pcp : Handle container image update] *****", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.pcp : Configure containers] **************", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.pcp : Ensure pcp container is enabled and started] ***", "skipping: [aap.demo.local]", "", "TASK [ansible.containerized_installer.pcp : Add firewalld rules] ***************", "skipping: [aap.demo.local]", "", "PLAY [Run the Automation Controller postinstall] *******************************", "", "TASK [ansible.containerized_installer.automationhub : Ensure automation hub is ready] ***", "ok: [aap.demo.local]", "", "TASK [ansible.containerized_installer.automationhub : Tag the container images to automation hub] ***", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest)", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest)", "", "TASK [ansible.containerized_installer.automationhub : Push the container images to automation hub] ***", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-minimal-rhel8:latest)", "changed: [aap.demo.local] => (item=registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel8:latest)", "", "TASK [ansible.containerized_installer.automationcontroller : Install the git binary] ***", "ok: [aap.demo.local -> localhost]", "", "TASK [ansible.containerized_installer.automationcontroller : Clone the postinstall config repository] ***", "changed: [aap.demo.local -> localhost]", "", "TASK [ansible.containerized_installer.automationcontroller : Include vars for automation controller] ***", "ok: [aap.demo.local]", "", "TASK [Execute automation controller resource configuration] ********************", "", "TASK [infra.controller_configuration.dispatch : Validating arguments against arg spec 'main' - An Ansible Role to call other roles to create objects on Ansible Controller.] ***", "ok: [aap.demo.local]", "", "TASK [Run the following infra.controller_configuration roles: settings, instances, instance_groups, organizations, labels, users, teams, credential_types, credentials, credential_input_sources, execution_environments, notification_templates, organizations, projects, inventories, inventory_sources, inventory_source_update, applications, hosts, bulk_host_create, groups, job_templates, workflow_job_templates, schedules, roles, job_launch, workflow_launch] ***", "skipping: [aap.demo.local] => (item={'role': 'settings', 'var': 'controller_settings', 'tags': 'settings'}) ", "skipping: [aap.demo.local] => (item={'role': 'instances', 'var': 'controller_instances', 'tags': 'instances'}) ", "skipping: [aap.demo.local] => (item={'role': 'instance_groups', 'var': 'controller_instance_groups', 'tags': 'instance_groups'}) ", "skipping: [aap.demo.local] => (item={'role': 'labels', 'var': 'controller_labels', 'tags': 'labels'}) ", "skipping: [aap.demo.local] => (item={'role': 'users', 'var': 'controller_user_accounts', 'tags': 'users'}) ", "skipping: [aap.demo.local] => (item={'role': 'teams', 'var': 'controller_teams', 'tags': 'teams'}) ", "skipping: [aap.demo.local] => (item={'role': 'credential_types', 'var': 'controller_credential_types', 'tags': 'credential_types'}) ", "skipping: [aap.demo.local] => (item={'role': 'credential_input_sources', 'var': 'controller_credential_input_sources', 'tags': 'credential_input_sources'}) ", "skipping: [aap.demo.local] => (item={'role': 'notification_templates', 'var': 'controller_notifications', 'tags': 'notification_templates'}) ", "skipping: [aap.demo.local] => (item={'role': 'inventories', 'var': 'controller_inventories', 'tags': 'inventories'}) ", "skipping: [aap.demo.local] => (item={'role': 'inventory_sources', 'var': 'controller_inventory_sources', 'tags': 'inventory_sources'}) ", "skipping: [aap.demo.local] => (item={'role': 'inventory_source_update', 'var': 'controller_inventory_sources', 'tags': 'inventory_sources'}) ", "skipping: [aap.demo.local] => (item={'role': 'applications', 'var': 'controller_applications', 'tags': 'applications'}) ", "skipping: [aap.demo.local] => (item={'role': 'hosts', 'var': 'controller_hosts', 'tags': 'hosts'}) ", "skipping: [aap.demo.local] => (item={'role': 'bulk_host_create', 'var': 'controller_bulk_hosts', 'tags': 'bulk_hosts'}) ", "skipping: [aap.demo.local] => (item={'role': 'groups', 'var': 'controller_groups', 'tags': 'inventories'}) ", "skipping: [aap.demo.local] => (item={'role': 'workflow_job_templates', 'var': 'controller_workflows', 'tags': 'workflow_job_templates'}) ", "skipping: [aap.demo.local] => (item={'role': 'schedules', 'var': 'controller_schedules', 'tags': 'schedules'}) ", "skipping: [aap.demo.local] => (item={'role': 'roles', 'var': 'controller_roles', 'tags': 'roles'}) ", "skipping: [aap.demo.local] => (item={'role': 'job_launch', 'var': 'controller_launch_jobs', 'tags': 'job_launch'}) ", "skipping: [aap.demo.local] => (item={'role': 'workflow_launch', 'var': 'controller_workflow_launch_jobs', 'tags': 'workflow_launch'}) ", "", "TASK [infra.controller_configuration.organizations : Validating arguments against arg spec 'main' - An Ansible Role to create organizations on Ansible Controller.] ***", "ok: [aap.demo.local]", "", "TASK [infra.controller_configuration.organizations : Managing Organizations] ***", "ok: [aap.demo.local] => (item=Create/Update organization Default)", "", "TASK [infra.controller_configuration.organizations : Flag for errors (check mode only)] ***", "skipping: [aap.demo.local]", "", "TASK [infra.controller_configuration.organizations : Managing Controller Organizations | Wait for finish the Organizations management] ***", "FAILED - RETRYING: [aap.demo.local]: Managing Controller Organizations | Wait for finish the Organizations management (30 retries left).", "ok: [aap.demo.local] => (item=Create/Update Controller Organization Default | Wait for finish the organization creation)", "", "TASK [infra.controller_configuration.credentials : Validating arguments against arg spec 'main' - An Ansible Role to create credentials on Ansible Controller.] ***", "ok: [aap.demo.local]", "", "TASK [infra.controller_configuration.credentials : Managing Credentials] *******", "ok: [aap.demo.local] => (item=None)", "ok: [aap.demo.local] => (item=None)", "ok: [aap.demo.local]", "", "TASK [infra.controller_configuration.credentials : Flag for errors (check mode only)] ***", "skipping: [aap.demo.local]", "", "TASK [infra.controller_configuration.credentials : Managing Controller Credentials | Wait for finish the credential management] ***", "FAILED - RETRYING: [aap.demo.local]: Managing Controller Credentials | Wait for finish the credential management (30 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Controller Credentials | Wait for finish the credential management (29 retries left).", "changed: [aap.demo.local] => (item=None)", "changed: [aap.demo.local] => (item=None)", "changed: [aap.demo.local]", "", "TASK [infra.controller_configuration.execution_environments : Validating arguments against arg spec 'main' - An Ansible Role to create execution environment objects on Ansible Controller.] ***", "ok: [aap.demo.local]", "", "TASK [infra.controller_configuration.execution_environments : Managing Controller Execution Environments] ***", "ok: [aap.demo.local] => (item=Create/Update Controller Execution Environment {'name': 'Product Demos EE', 'image': 'quay.io/ansible-product-demos/apd-ee-25:latest'})", "", "TASK [infra.controller_configuration.execution_environments : Flag for errors (check mode only)] ***", "skipping: [aap.demo.local]", "", "TASK [infra.controller_configuration.execution_environments : Managing Controller Execution Environments | Wait for finish the Controller Execution Environments management] ***", "FAILED - RETRYING: [aap.demo.local]: Managing Controller Execution Environments | Wait for finish the Controller Execution Environments management (30 retries left).", "changed: [aap.demo.local] => (item=Create/Update Controller Execution Environment Product Demos EE | Wait for finish the Controller Execution Environment creation)", "", "TASK [infra.controller_configuration.organizations : Validating arguments against arg spec 'main' - An Ansible Role to create organizations on Ansible Controller.] ***", "ok: [aap.demo.local]", "", "TASK [infra.controller_configuration.organizations : Managing Organizations] ***", "ok: [aap.demo.local] => (item=Create/Update organization Default)", "", "TASK [infra.controller_configuration.organizations : Flag for errors (check mode only)] ***", "skipping: [aap.demo.local]", "", "TASK [infra.controller_configuration.organizations : Managing Controller Organizations | Wait for finish the Organizations management] ***", "FAILED - RETRYING: [aap.demo.local]: Managing Controller Organizations | Wait for finish the Organizations management (30 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Controller Organizations | Wait for finish the Organizations management (29 retries left).", "changed: [aap.demo.local] => (item=Create/Update Controller Organization Default | Wait for finish the organization creation)", "", "TASK [infra.controller_configuration.projects : Validating arguments against arg spec 'main' - An Ansible Role to create projects on Ansible Controller.] ***", "ok: [aap.demo.local]", "", "TASK [infra.controller_configuration.projects : Managing Projects] *************", "ok: [aap.demo.local] => (item=Create/Update Project Ansible Product Demos)", "", "TASK [infra.controller_configuration.projects : Flag for errors (check mode only)] ***", "skipping: [aap.demo.local]", "", "TASK [infra.controller_configuration.projects : Managing Projects | Wait for finish the projects management] ***", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (30 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (29 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (28 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (27 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (26 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (25 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (24 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (23 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (22 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (21 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (20 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (19 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (18 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (17 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (16 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (15 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (14 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (13 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (12 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (11 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (10 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (9 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (8 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (7 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (6 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (5 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (4 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (3 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (2 retries left).", "FAILED - RETRYING: [aap.demo.local]: Managing Projects | Wait for finish the projects management (1 retries left).", "failed: [aap.demo.local] (item=Create/Update Project Ansible Product Demos | Wait for finish the project creation) => {\"__projects_job_async_results_item\": {\"__controller_project_item\": {\"default_environment\": \"Product Demos EE\", \"name\": \"Ansible Product Demos\", \"organization\": \"Default\", \"scm_branch\": \"main\", \"scm_type\": \"git\", \"scm_url\": \"https://github.com/ansible/product-demos\", \"wait\": true}, \"ansible_job_id\": \"j702731971334.50327\", \"ansible_loop_var\": \"__controller_project_item\", \"changed\": false, \"failed\": 0, \"finished\": 0, \"results_file\": \"/home/aap/.ansible_async/j702731971334.50327\", \"started\": 1}, \"ansible_job_id\": \"j702731971334.50327\", \"ansible_loop_var\": \"__projects_job_async_results_item\", \"attempts\": 30, \"changed\": false, \"finished\": 0, \"results_file\": \"/home/aap/.ansible_async/j702731971334.50327\", \"started\": 1, \"stderr\": \"\", \"stderr_lines\": [], \"stdout\": \"\", \"stdout_lines\": []}", "", "NO MORE HOSTS LEFT *************************************************************", "", "PLAY RECAP *********************************************************************", "aap.demo.local             : ok=633  changed=227  unreachable=0    failed=1    skipped=263  rescued=0    ignored=0   ", "localhost                  : ok=34   changed=0    unreachable=0    failed=0    skipped=55   rescued=0    ignored=0   "]}